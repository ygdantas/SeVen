fmod PROTOCOL-SYMBOLS is

--- Sorts
sorts Key KeyE KeyD Estado Msg AnnK Nat .
subsorts KeyE KeyD < Key .
subsorts Key Nat < Msg .
subsort Msg < Estado .

--- Operadores Criptografia
op enc : Key Msg -> Msg .
op dec : Key Msg -> Msg .

--- Nonce
op counter : Nat -> Estado .

--- Concatenacao
op _,_ : Msg Msg -> Msg .

--- Equacao Criptografia

var k : Key .
var m :  Msg .
eq dec(k, enc(k, m)) = m .

endfm


mod NS is
--- Importacoes
protecting PROTOCOL-SYMBOLS .
protecting NAT .

--- Configuracao
sort Configuracao .
subsort Estado < Configuracao .

op none : -> Configuracao [ctor] .
op __ : Configuracao Configuracao -> Configuracao [ctor assoc comm id: none] . 

--- Chave Publica conhecida
op AnnK : Key -> Estado .

--- Operadores Alice
op A0 : Key -> Estado .
op A1 : Key Key Msg -> Estado .
op A2 : Key Key Msg Msg -> Estado .

--- Operadores Bob
op B0 : Key -> Estado .
op B1 : Key Key Msg Msg -> Estado .
op B2 : Key Key Msg Msg -> Estado .

--- Operadores Intruso
  --- Ns(x) - Intruso intercepta uma mensagem
  --- Nr(x) - Intruso envia uma mensagem
op Ns : Msg -> Estado .
op Nr : Msg -> Estado . 
op M  : Msg -> Estado .
op D  : Msg -> Estado .
op C  : Msg -> Estado .
op A  : Msg -> Estado .

--- Operadores Empty Facts
ops R P : -> Estado .


--- Operadores GoodGuy
op GoodGuy : Key Key -> Estado .
ops keA kdA keB kdB : -> Key .

--- Operadores BadKey
op BadKey : Key Key -> Estado .
ops keD kdD : -> Key .

--- Operadores Key
op KP : Key Key -> Estado .
 
--- Nonce
op counter : Nat -> Estado .

--- Operador Size
op size : Msg -> Nat .

--- Equacao de inicializacao
op initial : -> Configuracao .
eq initial = GoodGuy(keA,kdA) KP(keA,kdA) AnnK(keA) BadKey(keD,kdD) 
KP(keD,kdD) AnnK(keD) GoodGuy(keB,kdB) KP(keB,kdB) AnnK(keB) M(keA) 
M(keD) M(kdD) M(keB) counter(0) A0(keA) B0(keB) R R R R R R R R R  . 

--- Operador Memória
op mem : Estado Configuracao -> Bool .

--- Equacao Memória
eq mem(f:Estado,f:Estado c:Configuracao) = true .
eq mem(f:Estado, c:Configuracao) = false [owise] .

---eq initial = GoodGuy(keA,kdA) KP(keA,kdA) AnnK(keA) GoodGuy(keB,kdB) KP(keB,kdB) AnnK(keB) counter(0) A0(keA) B0(keB) .

--- Variaveis
vars k'e ke : Key .
vars x y non tam : Nat .
vars x1 y1 x_io y_io t1 t2 : Msg .
vars keDY kdDY : Key .
var k : Key .

--- Equações Size
eq size(n:Nat) = 1 .
eq size(k:Key) = 1 . 
eq size(t1,t2) = (size(t1)) + (size(t2)) . 
eq size(enc(ke,x)) = (size(x)) + 2 .


--- Reescritas

--- Needham-Schroeder
crl[Al1]: (counter(x)) AnnK(k'e) A0(ke) P => (counter(x + 1)) A1(ke,k'e,x) Ns(enc(k'e,(ke,x))) AnnK(k'e) if x < 30 .
rl[Al2]: A1(ke,k'e,x) (Nr(enc(ke,(x,y)))) => (A2(ke,k'e,x,y)) (Ns(enc(k'e,y))) .
crl[Bo1]: (counter(y)) (B0(ke)) (Nr(enc(ke,(k'e,x)))) (AnnK(k'e)) => (counter(y + 1)) (B1(ke,k'e,x,y)) (Ns(enc(k'e,(x,y)))) (AnnK(k'e)) if y < 30  .
rl[Bo2]: (B1(ke,k'e,x,y)) (Nr(enc(ke,y))) => (B2(ke,k'e,x,y)) P .

---Decomposicao Dolev-Yao
rl[DCMP]: D((x1,y1)) R => D(x1) D(y1) .
rl[LRN]: D(x1) => M(x1) . 
crl[DEC]: M(kdDY) KP(keDY,kdDY) D(enc(keDY,x1)) R => M(kdDY) KP(keDY,kdDY) D(x1) M(enc(keDY,x1)) if (size(enc(kdDY,x1))) < 7 .
crl[LRNA]: D(enc(keDY,x1)) R => M(enc(keDY,x1)) A(enc(keDY,x1)) if (size(enc(keDY,x1))) < 7 .
rl[DECA]: M(kdDY) KP(keDY, kdDY) A(enc(keDY,x1)) => M(kdDY) KP(keDY,kdDY) D(x1)  .

---Composicao Dolev-Yao
crl[COMP]: C(x1) C(y1) => C((x1,y1)) R if (size(x1,y1)) < 7 .
rl[USE]: M(x1) R => C(x1) M(x1) .
crl[ENC]: KP(kdDY, keDY) M(keDY) C(x1) => KP(kdDY, keDY) M(keDY) C(enc(keDY,x1)) if (size(enc(kdDY,x1))) < 7 .
crl[GEN]: (counter(non)) R => (counter(non + 1))  M(non) if non < 30 .

---Regras I/O
rl[REC]: Ns(x_io) R => D(x_io) P .
rl[SND]: C(x_io) P => Nr(x_io) R . 

---Regras criar novas sessoes
rl[createA]: AnnK(k) P P P => AnnK(k) A0(k) .
rl[createB]: AnnK(k) P P P => AnnK(k) B0(k) .

---Memory maintenance rules
---rl[DELM]: M(x1) => R .
---rl[DELA]: A(x1) => R .
---rl[DELD]: D(x1) => R .
---rl[DELC]: C(x1) => R .


endm
