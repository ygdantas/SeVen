mod UNIFORM is
 ---inc VOIP-RULES .
 inc SEVEN-COOR-ATTACK .
 inc SAMPLER .
 inc AUXILIAR .

 op ads : -> Address .

 vars gt firstT lastT : Float .
 var NBuf : NBuffer .
 vars lenTour lenBuf limI limS greatest randN a b x : Nat .
 vars b1 b2 Buf BufDrp : Buffer .
 vars selecAds ads2 addDr : Address . 
 var elBuf eleDr : EleBuf .

 eq select(gt, NBuf) = uniform (gt, [getLenBuf(NBuf) | getBuffer(NBuf) ]) .

 op uniform : Float NBuffer -> ActorBuffer .
 eq uniform(gt, NBuf) = 
    < getAddress(selectRandom(getBuffer(NBuf), sampleUniWithInt(getLenBuf(NBuf)), < ads gt gt 0 0 >))
 	  $
   	remove(getBuffer(NBuf), getAddress(selectRandom(getBuffer(NBuf), sampleUniWithInt(getLenBuf(NBuf)), < ads gt gt 0 0 > ))) > .

***(
op uniform : Float NBuffer -> ActorBuffer .
ceq uniform(gt, NBuf) = < addDr $ BufDrp > 
 if addDr := getAddress(selectRandom(getBuffer(NBuf), sampleUniWithInt(getLenBuf(NBuf)), < ads gt gt 0 0 > )) 
 /\ BufDrp := remove(getBuffer(NBuf), addDr) . 
)

endm