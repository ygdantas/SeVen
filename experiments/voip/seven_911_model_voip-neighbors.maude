mod SAMPLER is
  pr RANDOM .
  pr COUNTER .
  pr CONVERSION .

  op sampleBerWithP : Float -> Bool .
  op sampleUniWithInt : Nat -> Nat .       
  op genRandom : Float Float -> [Float] .
  var n s : Nat .

  op rand : -> [Float] .
  rl [rnd] : rand => float(random(counter) / 4294967296) .

  op rrand : -> [Rat] .
  rl [rrnd] : rrand => random(counter) / 4294967296 .
	
  var lenR R1 Min Max : Float .

  eq sampleBerWithP(lenR) = if rand < lenR then true else false fi . 
  eq sampleUniWithInt(n) = floor(rrand * n) .
  eq genRandom(Min, Max) = - log(1.0 - (rand * (Max - Min) + Min) ) .

endm

mod AUXILIAR is

protecting NAT . 
protecting FLOAT .
protecting CONVERSION .

sort Contents .
sort Address .

sort Msg .
op _<-_ : Address Contents -> Msg . --- construtor Msg

sort ActiveMsg .
subsort ActiveMsg < Config .
op {_,_} : Float Msg -> ActiveMsg . --- Mensagem ativa

sort Actor .
sort ActorType . --- (atacante, servidor, client)
sorts Attribute AttributeSet .
subsort Attribute < AttributeSet .
op none : -> AttributeSet .
op _,_ : AttributeSet AttributeSet -> AttributeSet [assoc comm id: none] . --- Concatenar AttributeSET
op <name:_|_> : Address AttributeSet -> Actor . --- construtor actor
 
  op [__] : Msg Msg -> Msg .
  sort Config .
  subsorts Msg ActorType Actor < Config .

  sort Object .
  subsort Actor < Object . --- Actor can be represented by a term of sort Object
  subsort Msg < Object . --- Message can be represented by a term of sort Object
  subsort Object < Config .

--- Config
  op none : -> Config .
  op flag : Bool Float -> Config . ---- a flag delimiting execution rounds
  op __ : Config Config -> Config [assoc comm id: none] . --- construtor Config
--- END OF Config

--- SCHEDULER
  sorts Scheduler ScheduleMsg ScheduleList .
  subsorts ScheduleMsg Scheduler < ScheduleList .
  subsort Scheduler ScheduleMsg ScheduleList < Config .
  subsort Msg ActiveMsg < Scheduler .
  subsort Msg ActiveMsg < ScheduleList .

  op {_|_} : Float ScheduleList -> Scheduler .
  op  nil : -> ScheduleList .
  op  _;_ : ScheduleList ScheduleList -> ScheduleList [assoc id: nil] .
  op [_,_,_] : Float Msg Nat -> ScheduleMsg . --- Agendar envio de mensagem
--- END OF SCHEDULER


--- Scheduler Operation
  op insert : Scheduler ScheduleMsg -> Scheduler .
  op insert : ScheduleList ScheduleMsg -> ScheduleList .
  op insertList : Scheduler ScheduleList -> Scheduler .
  op insertList : ScheduleList ScheduleList -> ScheduleList .
--- End of List Operation

  op tick : Config -> Config .
  op mytick : Scheduler -> Config .
  op global-time : Scheduler -> Float .
  op getTime : Config -> Float .
	
  var t1 t2 t gt : Float .
  var C : Config .
  var O O1 : Object .
  var pmod i : Nat .
  var SL SL' : ScheduleList .
  var e : ScheduleMsg .
  var M1 M2 : Msg .

--- { float | Msg } --> ActiveMsg . 
  eq global-time({ gt | SL }) = gt .
  eq getTime(C {gt | SL}) = gt .  

  eq insert({ gt | SL },e) = { gt | insert(SL,e) } .
  eq insert(SL , [ t2 , M2, 1 ]) = SL .   
  eq insert([ t1 , M1, pmod ] ; SL , [ t2 , M2, 0 ]) = 
       if t1 < t2 then [ t1 , M1, pmod ] ; insert(SL, [ t2 , M2, 0 ]) 
                  else ([ t2 , M2, 0 ] ; [ t1 , M1, pmod ] ; SL) fi .
  eq insert( nil , [ t2 , M2, 0 ]) = [ t2 , M2, 0 ] .


  eq insertList({ gt | SL }, SL') = { gt | insertList(SL, SL') } .
  eq insertList(SL , [t2 , M2, pmod] ; SL') = insertList( insert(SL, [t2, M2, pmod]), SL' ) .
  ---eq insertList( nil , SL') = SL' .
  eq insertList( SL , nil ) = SL .

  eq mytick({ gt | [ t1 , M1, pmod ] ; SL }) = M1 { t1 | SL } .


endm

mod teste is 

protecting NAT . 
protecting FLOAT .
protecting AUXILIAR .
protecting RANDOM .
pr COUNTER .
protecting CONVERSION .
protecting SAMPLER .


vars eleBuf neleBuf : EleBuf .
vars ads nads : Address .
vars f nf li nli : Float .
vars limI limS nlimI nlimS ran : Nat .

--- PACKAGES - mensagem
  op GET : Address Nat -> Contents .
  op PRAGMA : Address Nat -> Contents . --- endereço, tamanho do pacote pragma
  op ACK : -> Contents .
  op END : -> Contents .
  op TIMEOUT : Address -> Contents .
  op TIMEOUT : -> Contents .
  op CONNECT : -> Contents .
  op FAIL : -> Contents .
  op INVITE : Address -> Contents .
  op RINGING : -> Contents .
  op TRYING : -> Contents .
  op BYE : Address -> Contents .
  op REMOVE : -> Contents .
  op UPDATE : Address -> Contents .

  ops spawn poll restart itimeout : -> Contents .

--- END OF PACKAGES

--- SERVER
  op server:_ : Address -> Attribute .	
  op req-cnt:_ : Float -> Attribute .
  op req-set:_ : NBuffer -> Attribute .
  op conn-set:_ : NBuffer -> Attribute . 
  op cnt:_ : Nat -> Attribute .
  op suc-get:_ : Nat -> Attribute .
--- END OF SERVER 

--- CLIENT
  sort Status .
  ops waiting connected failed : -> Status .
  op status:_ : Status -> Attribute [gather(&)] .
  op call:_ : Status -> Attribute [gather(&)] .
  op retries:_ : Nat -> Attribute .
  op rep-cnt:_ : Nat -> Attribute .
  op atime:_ : Float -> Attribute .  
  op stime:_ : Float -> Attribute .  

--- END OF CLIENT 

--- ATTACKER
  ops none get pragma : -> Status .
  ops none invite oncall complete incomplete finished : -> Status . 
  op step:_ : Status -> Attribute [gather(&)] .
  op cnt-pragma:_ : Nat -> Attribute .
--- END OF ATTACKER

--- Object names
  op g  :     -> Address .   --- generator
  op ga : -> Address . --- generator attackers
  op c  : Nat -> Address .   --- clients
  op a : Nat -> Address . --- attackers
  op At : -> Address . --- attacker
  op server : -> Address . --- Server
  op attacker : -> Address .

--- Buffer

  sorts EleBuf Buffer NBuffer .
  subsorts Address Float Buffer < NBuffer .
  subsort NBuffer < Attribute .
  subsort EleBuf < Buffer .
  
--- Elementos do Buffer 
 --- op <____> : Address Float Float Nat -> EleBuf . --- elementos do buffer (id, time da entrada, time da ultima requisição, tamanho get pack)
  op <_____> : Address Float Float Nat Nat -> EleBuf .
  op [_|_] : Nat Buffer -> NBuffer . --- NBuffer
  op none : -> Buffer .
  op __ : Buffer Buffer -> Buffer [comm assoc id: none] .   --- Construtor Buffer
  op getAddress : EleBuf -> Address .
  eq getAddress( < ads f li limI limS > ) = ads . 
  op getBuffer : NBuffer -> Buffer .
  eq getBuffer( [lenR:Nat | B:Buffer] ) = B:Buffer .
  op getLimI : Address Buffer -> Nat .
  eq getLimI( ads , < ads f li limI limS > B:Buffer ) = limI .  
  op getTime : Address Buffer -> Float .
  eq getTime( ads , < ads f li limI limS >  B:Buffer ) = f .
  op getLastTime : Address Buffer -> Float .
  eq getLastTime( ads , < ads f li limI limS > B:Buffer ) = li . 
  op getLimS : Address Buffer -> Nat .
  eq getLimS( ads , < ads f li limI limS > B:Buffer ) = limS .  

--- Operadores do Buffer 
  op add : NBuffer EleBuf -> NBuffer .
  op size : NBuffer -> Nat . 
  op remove : Buffer Address -> NBuffer .
  op _in_ : Address Buffer -> Bool .
  op update : NBuffer EleBuf EleBuf -> NBuffer .
  op search : Buffer Float -> Address .

--- Implementações  

  eq add([ lenR:Nat | B:Buffer ] , eleBuf ) = [ s(lenR:Nat) | eleBuf B:Buffer ] . 
  eq size([ lenR:Nat | B:Buffer ]) = lenR:Nat .
  eq update([lenR:Nat | < ads f li limI limS > B:Buffer] , < ads f li limI limS > , < nads nf nli nlimI nlimS > ) = [ (lenR:Nat) | < nads nf nli nlimI nlimS > B:Buffer ] .
  eq update([lenR:Nat | B:Buffer], < ads f li limI limS >, < nads nf nli nlimI nlimS > ) = < ads f li limI limS > [ (lenR:Nat) | < ads f li limI limS > B:Buffer ] [owise] .

  ceq search (eleBuf B:Buffer, gt ) = getAddress(eleBuf) 
	if (gt >= (getTime( getAddress(eleBuf) , B:Buffer ) ) + Tc ) .
  eq search(eleBuf B:Buffer, gt ) =  getAddress(eleBuf) [owise] .
    
  
 ceq remove(eleBuf B:Buffer, ads ) = B:Buffer 
  if ads == getAddress(eleBuf) .	
  eq remove(B:Buffer , ads) = B:Buffer [owise] .

  --- *** implementacao do operador IN *** ---
  ceq ads in eleBuf B:Buffer = true 
    if ads == getAddress(eleBuf) .
  eq ads in B:Buffer = false [owise] .

--- Fim do Buffer

***( Funcoes ASV )***
op tMedio : -> Float .
op tMax : -> Float .
eq tMedio = 5.0 .
eq tMax = 4.0 .

op accept-prob : Float -> Float .
eq accept-prob(pmod) = floor(lenBufSeVen) / pmod .

op swap : Buffer EleBuf Nat -> Buffer .
eq swap(eleBuf B:Buffer, neleBuf, s(i)) = eleBuf swap(B:Buffer, neleBuf, i) .
eq swap(eleBuf B:Buffer, neleBuf, 0) = neleBuf B:Buffer .
eq swap(none, neleBuf, i) = none .
---eq swap(eleBuf B:Buffer, neleBuf, s(i)) = neleBuf B:Buffer .


op reply : Address Buffer Float -> [ScheduleList] .
ceq reply(server, < ads f li limI limS > B:Buffer, gt) = [gt + delayBig, (ads <- RINGING) , drop?] ; [gt, server <- REMOVE, 0] ; [gt, server <- UPDATE(ads),0] ; reply(server, B:Buffer, gt) 
if (f == li) .
eq reply(server, < ads f li limI limS > B:Buffer, gt) = reply(server, B:Buffer, gt) [owise] .
eq reply(server , none , gt) = nil .

ops pIN pWAIT : -> Nat .
op alpha : -> Float .
eq pIN = 2 .
eq pWAIT = 8 .
eq alpha = 1.89 .


op exBuf : Float Float -> Nat .
---eq exBuf(gt:Float, f) = floor (rat((2.0 + 0.453 * exp(1.89 * (gt:Float + (- f) )))))  .
eq exBuf(gt:Float, f) = floor (rat (float(pWAIT) + exp( ((alpha * (gt:Float + (- f))) / tMedio ) )  ) ) .

---eq exBuf(gt:Float, f) = floor (rat (float(8) + exp( ((1.89 * (gt:Float + (- f))) / 5.0 ) )  ) ) .
--- pin = 2
--- pwait = 8
--- alfa = 1.89
--- eq = pwait + exp((alfa * (gt:Float + (-f) ) / tMedio)

--- ALTERAR VALOR DO 4o PARAMETRO DO BUFFER - 
op alBuf : Buffer Nat Float -> Buffer . --- alterar buffer

ceq alBuf(< ads f li limI limS > B:Buffer, n:Nat, gt:Float) = < ads f li n:Nat (n:Nat + (pWAIT + (- 1)) ) > alBuf(B:Buffer, (n:Nat + pWAIT), gt:Float) --- tentando
  if li == f .
ceq alBuf(< ads f li limI limS > B:Buffer, n:Nat, gt:Float) = < ads f li n:Nat (n:Nat + (pIN + (- 1)) ) > alBuf(B:Buffer, (n:Nat + pIN), gt:Float) --- session conectado <= tMedio 
  if (li =/= f) and gt + (- f) <= tMedio .
---ceq alBuf(< ads f li limI limS > B:Buffer, n:Nat) = < ads f li n:Nat (n:Nat + 6) > alBuf(B:Buffer, (n:Nat + 7)) --- session conectado > tMedio
ceq alBuf(< ads f li limI limS > B:Buffer, n:Nat, gt:Float) = < ads f li n:Nat  (n:Nat + exBuf(gt:Float,f) ) > alBuf(B:Buffer,  (n:Nat + exBuf(gt:Float,f) + 1 ), gt:Float )
  if (li =/= f) and gt + (- f) > tMedio . 
eq alBuf(none B:Buffer, n:Nat, gt:Float) = B:Buffer [owise] .

--- RETORNAR O MAIOR VALOR DO 4o PARAMETRO DO BUFFER 
op retMax : Buffer Nat -> Nat .

ceq retMax(< ads f li limI limS > B:Buffer, n:Nat) = retMax(B:Buffer, limS) 
  if limS > n:Nat .
ceq retMax(< ads f li limI limS > B:Buffer, n:Nat) = retMax(B:Buffer, n:Nat) 
  if limS <= n:Nat .
eq retMax(none, n:Nat) = (n:Nat + 1)  .

--- REMOVER O ACTOR SORTEADO 
op remBuf : Buffer Nat -> Buffer . --- alterar buffer
ceq remBuf(< ads f li limI limS > B:Buffer, ran) = remBuf(B:Buffer, ran) --- tentando
    if  ((ran >= limI and ran <= limS) and (f =/= li)).

ceq remBuf(< ads f li limI limS > B:Buffer, ran) = remBuf(remTwoNeighbor(B:Buffer,0), ran) --- tentando
    if  ((ran >= limI and ran <= limS) and (f == li)) .

eq remBuf(none B:Buffer, ran) = B:Buffer [owise] .
---eq remBuf(none B:Buffer, ran ,n:Nat) = B:Buffer [owise] .


--- amountOfActorsRemoved e' o parametro utilizado caso queira remover mais actors com o status wait, apos remover um com o status wait na equacao (remBuf)
op amountOfActorsRemoved : -> Nat .
eq amountOfActorsRemoved = 0 .
op remTwoNeighbor : Buffer Nat -> Buffer .
ceq remTwoNeighbor(< ads f li limI limS > B:Buffer, c:Nat) = remTwoNeighbor(B:Buffer, (c:Nat + 1))
    if (f == li) and (c:Nat < amountOfActorsRemoved) .

eq remTwoNeighbor(none B:Buffer, c:Nat) = B:Buffer [owise] .    


--- RETORNAR O ACTOR SORTEADO 
op remAds : Buffer Nat Address -> Address . --- alterar buffer
ceq remAds(< ads f li limI limS > B:Buffer, ran, nads) = remAds(B:Buffer, ran, ads) --- tentando
if  (ran >= limI and ran <= limS) .
eq remAds(none B:Buffer , ran, ads) = ads [owise] .


op tesRan : -> Nat .
eq tesRan = floor(random(counter) / 4294967296) .


***( Funcoes ASV )***


  op arate : Float -> Config .    ---- current attack rate
  op crate : Float -> Config .    ---- current client request rate


  ops lenPRAGMA lenGET : -> Nat .
  op ran : Nat -> Bool .
  op len : Nat -> Nat .
  op lenBuf : -> Nat .
  ops Ts Tc S SA LIMIT lenBufSeVen : -> [Float] .
  op  J  : Float Float -> [Nat] .
  op initDelay : -> [Float] .
  op  delay : -> [Float] .
  op delayBig : -> [Float] .
  op timeforCall : -> [Float] .
  op  drop? : -> [Nat] .
  ops newAlpha newRho : -> [Float] .
  ops numberClient numberAttacker : -> Nat .
  eq numberClient = 120 . 
  eq numberAttacker = 1200 .
  eq newAlpha =  (float(numberAttacker) / 4800.0) . ---0.001666667  . --- atacante 
  eq newRho = (float(numberClient)  / 4800.0) .  --- cliente (0.08 - 192)
  eq lenBufSeVen = 15.0 .	
  eq S = 120.0 . --- 15(6), 30 (12), 45(18), 60(24), 75(30), 90(36), 105(40), 120(46) 
  eq SA = 120.0 . 
  eq Ts = 0.2 . 
  eq Tc = 0.2 .
  eq LIMIT = 40.0 .
  eq J(Rho,Alpha) = 7 . --- the maximum number of consecutive time windows a client tries to send REQs to the server before it gives up 
  eq initDelay = 0.05 .
  eq delay = 0.1 .
  eq delayBig = 0.4 .
  eq timeforCall = 1.0 .
  eq drop? = 0 .
  eq lenPRAGMA = 68 .
  eq lenGET = 284 .
  eq ran(N:Nat) = float(random(N:Nat) / 4294967295) > 0.5 .


--- VARIABLES
  vars Ser Cli Actor : Address . --- Server, Client, Attacker
  var AS : AttributeSet . --- AttributeSet
  vars gt Rho r Alpha pmod t t' : Float . --- global time
  var  tts : Float . --- Tempo entre um request e um response
  vars i i' j k N lenR lenP : Nat . --- contains the count of requests that have already been sent
  var SL : ScheduleList .
---  var CONNECT : Contents .
  var m : Msg .
  vars P R : Buffer . 
  var lenPack : Nat .
  
--- END OF VARIABLES

--- ESTADO INICIAL
var S : Scheduler .
op buffer : -> Buffer .
op attributeS : -> AttributeSet .
op initial : -> Config .
op initStat : -> Config . 
op initState : -> Config . 
op scheduleList : -> ScheduleList .


	
eq initState = flag(true, 1.0) arate(newAlpha) crate(newRho)  ---{ 0.0 | nil } 
	<name: server | req-cnt: 0.0 , conn-set: [0 | none] , req-set: [0 | none] , cnt: 0 , suc-get: 0 , none > 
	<name: g | server: server, cnt: 0 , none > ---(g <- spawn)
	<name: ga | server: server, cnt: 0 , none >
        mytick(insert( insert( insert ({ 0.0 | nil} , [ initDelay, (ga <- spawn ), 0 ] ), [ initDelay , (g <- spawn ), 0 ] ), [ Ts, (server <- TIMEOUT), 0] ) )  .
---mytick(insert( insert ({ 0.0 | nil } , [ initDelay , (g <- spawn ), 0 ] ), [ Ts, (server <- TIMEOUT), 0] ) ) .
	--- mytick( insert( { 0.0 | nil }, [ initDelay, (g <- spawn), 0] ) ) .
---mytick(insert( { 0.0 | nil } , 
	---	  [ initDelay , (g <- spawn ), 0 ] ) ) .	

--- FIM DO ESTADO INICIAL

--- REESCRITAS ---
  crl[stop] :
     flag(true,r) { gt | SL }
   =>
     flag(false,r) mytick({gt | SL})
      if gt >= LIMIT .

--- SERVER ---

op emptyServer : -> Actor .
op checkEmpty : Config -> Bool .
eq checkEmpty (emptyServer C:Config) = true .
eq checkEmpty (C:Config) = false [owise] .


***(

Reescrita da mensagem INVITE:
  0] O atributo cnt conta quantas requisicoes foram recebidas
  1] Checa se o Buffer está cheio:
    1.1] Se sim, Joga a moeda usando o parametro pmod:
        1.1.1] Decide processar a nova requisicao:
        - pmod e' incrementado
        - cnt e' incrementado 
        - alBuf modifica o limI e limS de cada ator utilizando a eq (eq = pWAIT + exp(alpha * tempoNoBuffer) / tMedio), 
        - retMax retorna o maior numero gerado (maxNumber) e sampleUniWithInt sorteio um numero entre [1, maxNumber]
        - remBuf retira o numero escolhido (note que em remBuf tem uma chamada para remTwoNeighbor, o qual a qtde de atores removidos (pWait actors)
           é parametrizado por amountOfActorsRemoved)
        - por fim, a equacao add é chamada e um novo actor é inserido, uma mensagem TRYING e' enviada para o novo actor e uma mensagem poll e' enviada 
          para o actor removidos
        1.1.2] Decide nao processar a nova requisicao
        - pmod e' incrementado
        - cnt e' incrementado 
        - uma mensagem poll e' enviada para o actor
    1.2] Se nao,
        - cnt e' incrementado      
       - adiciona a nova requisicao no buffer


  ***)

  rl [ServerINVITE] : 
     flag(true, r) { gt | SL }
     <name: Ser | req-cnt: pmod , conn-set: [lenP | P] , req-set: [lenR | R], cnt: i , suc-get: k ,  AS > 
     (Ser <- INVITE(Actor))
     => flag(gt <= LIMIT * r, r)
      if (float(lenP) >= floor(lenBufSeVen)) then --- se buffer de conexao esta cheio
	  	      if (sampleBerWithP(accept-prob(pmod))) then --- modifica o buffer usando alBuf
		          <name: Ser | req-cnt: (pmod + 1.0) , conn-set: add([lenP + (-1) | remBuf(alBuf(P,0,gt), sampleUniWithInt( retMax(alBuf(P,0,gt),0) ) )], < Actor gt gt 0 0 > ), req-set: add( [lenR | R], < Actor gt gt 0 0 > ), cnt: s(i) , suc-get: retMax(P, 0) , AS >	 
		          mytick(insert( insert({ gt | SL}, [gt + delay, Actor <- TRYING, 0] ), [gt, (remAds(alBuf(P,0,gt), sampleUniWithInt( retMax(alBuf(P,0,gt),0) ), Actor ) <- poll), 0] ) ) --- send try to new actor and poll to the actor who was removed.
		        else
	           <name: Ser | req-cnt: (pmod + 1.0) , conn-set: [lenP | P] , req-set: [lenR | R], cnt: s(i) , suc-get: k , AS >
   		       mytick(insert( { gt | SL } , [ gt + delay , (Actor <- poll), 0 ] ) )
            fi 
      else 
		    <name: Ser | req-cnt: pmod , conn-set: add( [lenP | P], < Actor gt gt 0 0 > ) , req-set: add( [lenR | R], < Actor gt gt 0 0 > ), cnt: s(i) , suc-get: s(k) , AS >
	      mytick(insert({ gt | SL}, [gt + delay, Actor <- TRYING, 0] ) )	
		  fi .

***(

Reescrita da mensagem BYE:

  A mensagem BYE e' enviada por clientes quando querem 'desligar' a ligacao. A reescrita simplesmente envia um ACK como resposta.

***)

    rl [ServerBYE] : 
     	flag(true, r) { gt | SL }
     	<name: Ser | req-cnt: pmod , conn-set: [lenP | P] , req-set: [lenR | R], cnt: i , suc-get: k ,  AS > 
    	 (Ser <- BYE(Actor))
     => flag(gt <= LIMIT * r, r)
    	if(Actor in P) then
      	<name: Ser | req-cnt: pmod , conn-set: [lenP + (-1) | remove(P, Actor) ] , req-set: [lenR | R], cnt: i , suc-get: k , AS > 
      	 mytick(insert( { gt | SL } , [ gt + delay , (Actor <- ACK), 0 ] ) ) 
	 ---mytick({gt | SL }) 
    	else
      	<name: Ser | req-cnt: pmod , conn-set: [lenP | P] , req-set: [lenR | R], cnt: i , suc-get: k ,  AS > 
      	mytick({gt | SL }) 
	    fi .
	 
***(

Reescrita da mensagem REMOVE:

  Zera o segundo buffer (R) ao final de cada rodada.

***)

    rl [ServerRemove] :
       flag(true, r) 
       <name: Ser | req-cnt: pmod , conn-set: [lenP | P] , req-set: [lenR | R], cnt: i , suc-get: k , AS > 
      (Ser <- REMOVE) { gt | SL }
     => flag(gt <= LIMIT * r, r)
    	<name: Ser | req-cnt: pmod , conn-set: [lenP | P] , req-set: [0 | none], cnt: i , suc-get: k , AS >
    	mytick({ gt | SL }) . 

***(

Reescrita da mensagem UPDATE:

  Atualiza o atributo do cliente informando quando ele recebeu um 'RINGING'

***)

    rl [ServerUpdate] :
    	flag(true,r)
    	<name: Ser | req-cnt: pmod , conn-set: [lenP | P] , req-set: [lenR | R], cnt: i , suc-get: k , AS > 
      (Ser <- UPDATE(Actor)) { gt | SL }	
    => flag(gt <= LIMIT * r, r)
	     <name: Ser | req-cnt: (pmod) , conn-set: update( [lenP | P], < Actor (getTime(Actor, P)) getLastTime(Actor, P) getLimI(Actor, P) getLimS(Actor, P) >, 
        < Actor getTime(Actor, P) gt getLimI(Actor, P) getLimS(Actor, P) > ) , req-set: [lenR | R], cnt: i , suc-get: k , AS >
       mytick({gt | SL }) .		

***(

Reescrita da mensagem TIMEOUT:

  E' a reescrita do ROUND, caso queiras colocar um pmod 'mais dinamico', e' preciso modificar o atributo 'req-cnt', por exemplo:
     rec-cnt: (floor(lenBufSeVen) + float(i)), onde 'i' e' o contador de requisicoes recebidas ate o momento,
      caso queiras usar a estrategia que conversamos pelo skype, e' preciso zerar 'cnt', i.e., cnt: 0

***)

    rl [ServerTimeoutReq] : 
       flag(true, r) 
       <name: Ser | req-cnt: pmod , conn-set: [lenP | P] , req-set: [lenR | R], cnt: i , suc-get: k , AS > 
       (Ser <- TIMEOUT) { gt | SL }
     => flag(gt <= LIMIT * r, r)
       if(lenR =/= 0) then
        	<name: Ser | req-cnt: (floor(lenBufSeVen)), conn-set: [lenP | P] , req-set: [lenR | R], cnt: i , suc-get: k , AS >  
        	mytick( insert( insertList( { gt | SL } , reply(Ser, P, gt) ) , [ gt + Ts , (server <- TIMEOUT), 0] )) 
       else
          <name: Ser | req-cnt: (floor(lenBufSeVen)), conn-set: [lenP | P] , req-set: [lenR | R], cnt: i , suc-get: k , AS >
          mytick(insert ( { gt | SL}, [ gt + Ts, (server <- TIMEOUT), 0 ]  ) )  

       fi .             

--- END OF SERVER ---


--- CLIENT ---

--- Equação para gerar clientes

--- Clients coming in at the rate of Rho * S
    eq crate(Rho)
     <name: g | server: Ser, cnt: i , AS > (g <- spawn) { gt | SL }
     = crate(Rho)
        <name: g | server: Ser , cnt: s(i) , AS > 
        <name: c(i) | server: Ser , retries: 0 , atime: gt , stime: Infinity , status: none , AS > 
        mytick(insert(insert( { gt | SL } ,
           [ gt  , (c(i) <- poll), 0 ] ) ,
	   [ (1.0  / (Rho * S)) + (gt)  , (g <- spawn), 0 ] ) ) .
    ---    if numberClient > i . 
--- Fim da Equacao  mi = 1.875

   rl [CliSendINVITE] : 
        flag(true, r) crate(Rho) arate(Alpha)
        <name: c(i) | server: Ser , retries: j , status: none, AS >
        (c(i) <- poll) { gt | SL }
     => flag(gt <= LIMIT * r, r) crate(Rho) arate(Alpha)
        ---if (j <= J(Rho,Alpha)) then
          <name: c(i) | server: Ser , retries: j , status: invite, AS >
          mytick(insert ( { gt | SL}, [ gt + delay, (Ser <- INVITE(c(i))), 0 ]  )  ) .

    rl [CliRecTRYING] : 
        flag(true, r) { gt | SL }
        <name: c(i) | server: Ser , retries: j , status: invite, AS >
       (c(i) <- TRYING)
     => flag(gt <= LIMIT * r, r)
      	<name: c(i) | server: Ser , retries: j , status: invite, AS >
      	---mytick(insert( { gt | SL } ,[ gt + delay + delay + delay + delay, (c(i) <- poll), 0 ] ) ) .         	
      	mytick({ gt | SL }) .

***(

Reescrita da mensagem RINGING (Cliente):

 Ao receber RINGING do Server, o cliente gera um numero aleatorio entre ]0,tMedio[

***)

    rl [CliRecRINGING] : 
        flag(true, r) { gt | SL }
        <name: c(i) | server: Ser , stime: Infinity , retries: j , status: invite, AS > 
        (c(i) <- RINGING )
     => flag(gt <= LIMIT * r, r)
       <name: c(i) | server: Ser , stime: (((genRandom(0.9999, 0.0001)) / 0.2) + (gt)) , retries: j , status: connected, AS >  
       mytick(insert( { gt | SL } , [ (((genRandom(0.9999, 0.0001)) / 0.2) + (gt)), (Ser <- BYE(c(i)) ), 0 ] ) )  .

   rl [CliEnd-Incomplete-drop] :
      flag(true,r) { gt | SL }
      (c(i) <- poll)
      <name: c(i) | server: Ser , retries: j , status: connected, AS >
     => flag(gt <= LIMIT * r, r)
         <name: c(i) | server: Ser , atime: gt, retries: j , status: incomplete, AS >
          mytick({ gt | SL }) .


   rl [CliEnd-Complete] :
      flag(true,r) { gt | SL }
      <name: c(i) | server: Ser , retries: j , status: connected, AS > 
      (c(i) <- ACK)
     => flag(gt <= LIMIT * r, r)
      <name: c(i) | server: Ser , retries: j , status: finished, AS >
---      <name: c(i) | server: Ser , stime: gt , retries: j , status: connected, call: complete, AS > 
      mytick({ gt | SL }) .

    rl [CliNotRestartAfterRINGING] :
      flag(true,r) { gt | SL }
      (c(i) <- RINGING)
      <name: c(i) | server: Ser , retries: j , status: connected, AS >
     => flag(gt <= LIMIT * r, r)
      <name: c(i) | server: Ser , retries: j , status: connected, AS > 
      mytick({ gt | SL }) . 

   rl [CliEnd-Incomplete-drop2] :
      flag(true,r) { gt | SL }
      (c(i) <- poll)
      <name: c(i) | server: Ser , retries: j , status: incomplete, AS >
 ---     <name: c(i) | server: Ser , stime: Infinity , retries: j , status: connected, AS >
     => flag(gt <= LIMIT * r, r)
         <name: c(i) | server: Ser , retries: j , status: incomplete, AS >
---      <name: c(i) | server: Ser , stime: gt , retries: j , status: connected, call: incomplete, AS > 
        mytick({ gt | SL }) .

    rl [CliEnd-Incomplete-drop2] :
      flag(true,r) { gt | SL }
      (c(i) <- poll)
      <name: c(i) | server: Ser , retries: j , status: invite, AS >
 ---     <name: c(i) | server: Ser , stime: Infinity , retries: j , status: connected, AS >
     => flag(gt <= LIMIT * r, r)
         <name: c(i) | server: Ser , retries: j , status: invite, AS >
---      <name: c(i) | server: Ser , stime: gt , retries: j , status: connected, call: incomplete, AS > 
        mytick({ gt | SL }) .   


   rl [CliEnd-ACK-with-incomplete] :
      flag(true,r) { gt | SL }
      <name: c(i) | server: Ser , retries: j , status: incomplete, AS >
      (c(i) <- ACK)
---      <name: c(i) | server: Ser , stime: Infinity , retries: j , status: connected, AS >
     => flag(gt <= LIMIT * r, r)
      <name: c(i) | server: Ser , retries: j , status: incomplete, AS >
---      <name: c(i) | server: Ser , stime: gt , retries: j , status: connected, call: complete, AS > 
      mytick({ gt | SL }) .


--- ATTACKER ---


--- Attackers coming in at the rate of Rho * S
    eq arate(Alpha)
       <name: ga | server: Ser, cnt: i , AS > (ga <- spawn) { gt | SL }
     = arate(Alpha)
        <name: ga | server: Ser , cnt: s(i) , AS > 
        <name: a(i) | server: Ser , atime: gt , stime: Infinity ,status: none , AS >  
        mytick(insert(insert( { gt | SL } ,
           [ gt  , (a(i) <- poll), 0 ] ) ,
	     [ (1.0  / (Alpha * SA)) + (gt)  , (ga <- spawn), 0 ] ) ) .
---    if numberAttacker > i .

--- Automato = none -> get -> pragma <-> pragma
  rl [ATSendINVITE] : 
        flag(true, r) arate(Alpha) crate(Rho)
        <name: a(i) | server: Ser , status: none , AS > 
        (a(i) <- poll) { gt | SL }
     => flag(gt <= LIMIT * r, r) arate(Alpha) crate(Rho)
        <name: a(i) | server: Ser , status: invite , AS > 
        mytick(insert( { gt | SL } ,
        [ gt + delay, (Ser <- INVITE(a(i))), 0 ] ) ) .

 rl [ATSendRecTRYING] : 
        flag(true, r) arate(Alpha) crate(Rho)
        <name: a(i) | server: Ser , status: invite , AS > 
        (a(i) <- TRYING) { gt | SL } 
     => flag(gt <= LIMIT * r, r) arate(Alpha) crate(Rho)
        <name: a(i) | server: Ser, status: invite , AS >
        mytick({ gt | SL }) . 
        ---mytick(insert( { gt | SL } ,[ gt + delay + delay + delay + delay, (a(i) <- poll), 0 ] ) )   .

***(

Reescrita da mensagem RINGING (Atacante):

 Ao receber RINGING do Server, o atacante gera um numero aleatorio entre ]0,0.4[

***)

   rl [ATRecRINGING] : 
        flag(true, r) arate(Alpha) crate(Rho)
        <name: a(i) | server: Ser , status: invite , AS > 
        (a(i) <- RINGING) { gt | SL } 
     => flag(gt <= LIMIT * r, r) arate(Alpha) crate(Rho)
        <name: a(i) | server: Ser, status: oncall ,AS >
        mytick(insert( { gt | SL } , [ ((genRandom(0.9999, 0.0001)) / 2.5) + (gt), (Ser <- BYE(a(i)) ), 0 ] ) )  . 
	 ----mytick(insert( { gt | SL } , [ gt + delay, (Ser <- INVITE(a(i))), 0 ] ) ) .
 	---mytick(insert( insert ( { gt | SL } , [ gt + delay, (Ser <- GET(a(i),len(lenGET))), 0 ] ), [ gt + delay + delay, (a(i) <- poll), 0] ) ) .

    rl [Restart-Timeout-Attacker-none2] :
      (a(i) <- ACK) { gt | SL } 
      <name: a(i) | server: Ser , status: oncall , AS >  
   =>
      <name: a(i) | server: Ser , status: none , AS  >
      ---mytick({ gt | SL } ) .
      mytick(insert( { gt | SL} , [ gt + delay, (a(i) <- poll), 0 ] ) ) .

  
    rl [Restart-Timeout-Attacker-none2] :
    	(a(i) <- poll) { gt | SL } 
    	<name: a(i) | server: Ser , status: invite , AS >  
   =>
      <name: a(i) | server: Ser , status: invite , AS  >
      mytick({ gt | SL } ) .

   rl [attack-end] :
      (a(i) <- poll) { gt | SL } 
      <name: a(i) | server: Ser, status: oncall , AS >  
     =>
      <name: a(i) | server: Ser, status: oncall , AS  >
      mytick({ gt | SL } ) .

--- END OF ATTACKER ---	


--- *** PVeSTa *** ---

---var lenP : Float .
var C : Config .
var b : Bool .
var pv-f : Float .
op countConnectedAT : Float Config -> Float .
op countConnectedFIN : Float Config -> Float .
op countConnectedCON : Float Config -> Float .
op countConnectedIN : Float Config -> Float .
op countConnectedDoS : Float Config -> Float .
op  countClients : Config -> Float .
op countAttackers : Config -> Float .
op countDenialPragma : Config -> Float .
op countConAttacker : Float Config -> Float .
op val : Nat Config -> Float .
op sat : Nat Config -> Bool .
op networkTraffic : Config -> Float .
op countPragma : Config -> Float .

--- Success Probability
op hasConnected : Nat Config -> Float .

eq hasConnected(i, <name: c(i) | status: connected , AS > C ) = 1.0 .
eq hasConnected(i, C) = 0.0 [owise] .


***(

Equacao disponibilidade do cliente:

Utilizo tanto finished (countConnectedFIN), quanto connected (countConnectedCON) na soma, pois se a simualucao terminar, e o cliente estiver com o status 'connected',
  eu conto como ligacao finalizada

***)

eq countConnectedFIN(pv-f, <name: c(i) | status: finished , AS > C ) = countConnectedFIN(pv-f + 1.0 , C) .
eq countConnectedFIN(pv-f,C) = pv-f [owise] .

eq countConnectedCON(pv-f, <name: c(i) | status: connected,  AS > C ) = countConnectedCON(pv-f + 1.0 , C) .
eq countConnectedCON(pv-f,C) = pv-f [owise] .


eq countConnectedIN(pv-f, <name: c(i) | status: incomplete,  AS > C ) = countConnectedIN(pv-f + 1.0 , C) .
eq countConnectedIN(pv-f,C) = pv-f [owise] .
---)***



eq countConnectedDoS(pv-f, <name: c(i) | status: invite,  AS > C ) = countConnectedDoS(pv-f + 1.0 , C) .
eq countConnectedDoS(pv-f,C) = pv-f [owise] .



eq countClients(<name: g | cnt: i , AS > C) = float(i) .
eq countAttackers(<name: ga | cnt: i , AS > C) = float(i) .
eq networkTraffic(<name: Ser | cnt: i , suc-get: k , AS > C) = float(i) .


eq countConnectedAT(pv-f, <name: a(i) | status: oncall , AS > C ) = countConnectedAT(pv-f + 1.0 , C) .
eq countConnectedAT(pv-f,C) = pv-f [owise] .

  --- Average time-to-service
  op  avgTTS : Config -> Float .
  op  sumTTS : Float Config -> Float .
 ceq avgTTS(C) = if r > 0.0 then sumTTS(0.0, C) / r else 0.0 fi 
                    if r := countConnectedIN(0.0, C) .

 eq sumTTS(pv-f, <name: c(i) | atime: t , stime: t' , status: incomplete, AS > C )
     = sumTTS(pv-f + (t / t'), C) .
  eq sumTTS(pv-f, C) = pv-f [owise] . 

eq tick( flag(b, r) C ) = flag(true, r + 1.0) C .

eq sat(0, C) = if hasConnected(0, C) > 0.0 then true else false fi .
eq val(0,C) = countConnectedFIN(0.0,C) .
eq val(1,C) = countClients(C) .
eq val(2,C) = countAttackers(C) .
eq val(3,C) = (countConnectedCON(0.0,C) + countConnectedFIN(0.0,C)) / countClients(C) . 
---eq val(4,C) = countConnectedIN(0.0, C) / countClients(C) .
eq val(4,C) = countConnectedIN(0.0, C) .  
eq val(5,C) = countConnectedDoS(0.0, C) / countClients(C) .
eq val(6,C) = avgTTS(C) .
eq val(7,C) = countPragma(C) .

endm	

***(

Como usar o PvEsTa:

Repare que para cada simulacao, tem um numero como primeiro parametro, por exemplo, para disponibilidade eu uso o numero 3:
  eq val(3,C) = (countConnectedCON(0.0,C) + countConnectedFIN(0.0,C)) / countClients(C) .

Na pasta 'experiments/voip', tem um arquivo *.quatex para cada chamada, por exemplo, para disponibilidade é o 'availability.quatex', o qual tem o conteudo:
    query( ) = { s.rval(3) } ;
    eval E[ # query( ) ] ;

Que faz a chamada para o numero '3'. 

Como rodar client/server:

E' preciso abrir 2 abas, uma para o cliente e outra para o servidor:

1. Servidor: executando o server:

  ./run-server-example.sh

2. Cliente: tem o arquivo 'run-client-example-seven.sh', o qual faz a chamada do codigo 'maude' e também do quatex, por exemplo:

java -jar ../../pvesta/pvesta-client.jar -l ../../pvesta/serverlist -m seven_911_model_voip-rem-neighbor.maude -f availability.quatex

Eu, geralmente, faco uma sequence de simulacoes, uma para a qte de cliente, de atacante, dispobnilidade, ligacoes incompletas, tts e etc. Por isso,
  existe uma lista de chamadas no documento.

 * Executando o client:
  
  ./run-client-example-seven.sh

Agora e' so' esperar o resultado da simulacao =)

)***
