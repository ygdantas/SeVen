mod SAMPLER is
  pr RANDOM .
  pr COUNTER .
  pr CONVERSION .

  op sampleBerWithP : Float -> Bool .
  op sampleUniWithInt : Nat -> Nat .       
  op genRandom : Float Float -> [Float] .
  var n s : Nat .

  op rand : -> [Float] .
  rl [rnd] : rand => float(random(counter) / 4294967296) .
  --- eq rand = float(random(1) / 4294967296) .
  
  op rrand : -> [Rat] .
  --- eq rrand = random(1) / 4294967296 .
  rl [rrnd] : rrand => random(counter) / 4294967296 .
	
  var lenR R1 Min Max : Float .

  eq sampleBerWithP(lenR) = if rand < lenR then true else false fi . 
  eq sampleUniWithInt(n) = floor(rrand * n) .
  eq genRandom(Min, Max) = - log(1.0 - (rand * (Max - Min) + Min) ) .

endm

mod AUXILIAR is

protecting SAMPLER .
protecting NAT . 
protecting FLOAT .
protecting CONVERSION .

sort Contents .
sort Address .

sort Msg .
op _<-_ : Address Contents -> Msg . --- construtor Msg

sort ActiveMsg .
subsort ActiveMsg < Config .
op {_,_} : Float Msg -> ActiveMsg . --- Mensagem ativa

sort Actor .
sort ActorType . --- (atacante, servidor, client)
sorts Attribute AttributeSet .
subsort Attribute < AttributeSet .
op none : -> AttributeSet .
op _,_ : AttributeSet AttributeSet -> AttributeSet [assoc comm id: none] . --- Concatenar AttributeSET
op <name:_|_> : Address AttributeSet -> Actor . --- construtor actor
 
  op [__] : Msg Msg -> Msg .
  sort Config .
  subsorts Msg ActorType Actor < Config .

  sort Object .
  subsort Actor < Object . --- Actor can be represented by a term of sort Object
  subsort Msg < Object . --- Message can be represented by a term of sort Object
  subsort Object < Config .

--- Config
  op none : -> Config .
  op flag : Bool Float -> Config . ---- a flag delimiting execution rounds
  op __ : Config Config -> Config [assoc comm id: none] . --- construtor Config
--- END OF Config

--- SCHEDULER
  sorts Scheduler ScheduleMsg ScheduleList .
  subsorts ScheduleMsg Scheduler < ScheduleList .
  subsort Scheduler ScheduleMsg ScheduleList < Config .
  subsort Msg ActiveMsg < Scheduler .
  subsort Msg ActiveMsg < ScheduleList .

  op {_|_} : Float ScheduleList -> Scheduler .
  op  nil : -> ScheduleList .
  op  _;_ : ScheduleList ScheduleList -> ScheduleList [assoc id: nil] .
  op [_,_,_] : Float Msg Nat -> ScheduleMsg . --- Agendar envio de mensagem
--- END OF SCHEDULER


--- Scheduler Operation
  op insert : Scheduler ScheduleMsg -> Scheduler .
  op insert : ScheduleList ScheduleMsg -> ScheduleList .
  op insertList : Scheduler ScheduleList -> Scheduler .
  op insertList : ScheduleList ScheduleList -> ScheduleList .
--- End of List Operation

  op tick : Config -> Config .
  op mytick : Scheduler -> Config .
  op global-time : Scheduler -> Float .
  op getTime : Config -> Float .
	
  var t1 t2 t gt : Float .
  var C : Config .
  var O O1 : Object .
  var pmod i : Nat .
  var SL SL' : ScheduleList .
  var e : ScheduleMsg .
  var M1 M2 : Msg .

--- { float | Msg } --> ActiveMsg . 
  eq global-time({ gt | SL }) = gt .
  eq getTime(C {gt | SL}) = gt .  

  eq insert({ gt | SL },e) = { gt | insert(SL,e) } .
  eq insert(SL , [ t2 , M2, 1 ]) = SL .   
  eq insert([ t1 , M1, pmod ] ; SL , [ t2 , M2, 0 ]) = 
       if t1 < t2 then [ t1 , M1, pmod ] ; insert(SL, [ t2 , M2, 0 ]) 
                  else ([ t2 , M2, 0 ] ; [ t1 , M1, pmod ] ; SL) fi .
  eq insert( nil , [ t2 , M2, 0 ]) = [ t2 , M2, 0 ] .


  eq insertList({ gt | SL }, SL') = { gt | insertList(SL, SL') } .
  eq insertList(SL , [t2 , M2, pmod] ; SL') = insertList( insert(SL, [t2, M2, pmod]), SL' ) .
  ---eq insertList( nil , SL') = SL' .
  eq insertList( SL , nil ) = SL .

  eq mytick({ gt | [ t1 , M1, pmod ] ; SL }) = M1 { t1 | SL } .
  eq mytick( { gt | nil }) = { gt | nil } . --- Vivek changed


endm

mod SEVEN-COOR-ATTACK is 

protecting NAT . 
protecting FLOAT .
protecting AUXILIAR .
protecting RANDOM .
pr COUNTER .
protecting CONVERSION .
protecting SAMPLER .


vars eleBuf neleBuf retEleBuf : EleBuf .
vars buf nBuf : Buffer .
vars ads nads : Address .
vars f nf li nli x y : Float .
vars limI limS nlimI nlimS ran sizeBuf sizeTour cnt longest greatest lenB : Nat .

--- PACKAGES - mensagem
  op GET : Address Nat -> Contents .
  op PRAGMA : Address Nat -> Contents . --- endereço, tamanho do pacote pragma
  op ACK : -> Contents .
  op END : -> Contents .
  op TIMEOUT : Address -> Contents .
  op TIMEOUT : -> Contents .
  op CONNECT : -> Contents .
  op FAIL : -> Contents .
  op INVITE : Address -> Contents .
  op RINGING : -> Contents .
  op TRYING : -> Contents .
  op BYE : Address -> Contents .
  op REMOVE : -> Contents .
  op UPDATE : Address -> Contents .

  ops spawn poll restart itimeout : -> Contents .

--- END OF PACKAGES

--- SERVER
  op server:_ : Address -> Attribute .	
  op req-cnt:_ : Float -> Attribute .
  op req-set:_ : NBuffer -> Attribute .
  op conn-set:_ : NBuffer -> Attribute . 
  op cnt:_ : Nat -> Attribute .
  op suc-get:_ : Nat -> Attribute .
--- END OF SERVER 

--- CLIENT
  sort Status .
  ops waiting connected failed : -> Status .
  op status:_ : Status -> Attribute [gather(&)] .
  op call:_ : Status -> Attribute [gather(&)] .
  op retries:_ : Nat -> Attribute .
  op rep-cnt:_ : Nat -> Attribute .
  op atime:_ : Float -> Attribute .  
  op stime:_ : Float -> Attribute .  

--- END OF CLIENT 

--- ATTACKER
  ops none get pragma : -> Status .
  ops none invite oncall complete incomplete finished : -> Status . 
  op step:_ : Status -> Attribute [gather(&)] .
  op cnt-pragma:_ : Nat -> Attribute .
--- END OF ATTACKER

--- Object names
  op g  :     -> Address .   --- generator
  op ga : -> Address . --- generator attackers
  op c  : Nat -> Address .   --- clients
  op a : Nat -> Address . --- attackers
  op At : -> Address . --- attacker
  op server : -> Address . --- Server
  op attacker : -> Address .

--- Buffer

  sorts EleBuf Buffer NBuffer .
  subsorts Address Float Buffer < NBuffer .
  subsort NBuffer < Attribute .
  subsort EleBuf < Buffer .
  

--- EleBuf
  --- 1st parameter: Address - ID (e.g., IP:Port) of the actor
  --- 2nd parameter: Float - stores the time of the first request of the actor
  --- 3th parameter: Float - stores the time of the last request of the actor
  --- whenever the buffer is full and a new request arrives, I split the probability of each actor being chosen by using intervals
  --- 4nd parameter: Nat - start of the interval
  --- 5nd parameter: Nat - end of the interval
 op <_____> : Address Float Float Nat Nat -> EleBuf .
 --- NBuffer
  --- 1st parameter: Nat: length of the buffer
  --- 2nd parameter: Buffer: buffer itself  
  op [_|_] : Nat Buffer -> NBuffer . --- NBuffer
  op none : -> Buffer .
  op _;_ : Buffer Buffer -> Buffer [assoc id: none] .   --- [comm assoc id: none] .
  op getBuffer : NBuffer -> Buffer .
  eq getBuffer( [lenR:Nat | B:Buffer] ) = B:Buffer .
  op getLenBuf : NBuffer -> Nat .
  eq getLenBuf([lenR:Nat | B:Buffer] ) = lenR:Nat . 

  op getAddress : EleBuf -> Address .
  eq getAddress( < ads f li limI limS > ) = ads . 
  
  op errorN : -> Nat . --- natural
  eq errorN = - 1 .
  op errorF : -> Float . --- float
  eq errorF = - 1.0 .
  op getLimI : Address Buffer -> Nat .
  ceq getLimI(adsInput:Address, < ads f li limI limS > ; B:Buffer) = limI  
    if (adsInput:Address == ads ) .
  eq getLimI (adsInput:Address, < ads f li limI limS > ; B:Buffer) = getLimI (adsInput:Address, B:Buffer) [owise] .
  eq getLimI (adsInput:Address, none) = errorN .
  ---eq getLimI( ads , < ads f li limI limS > B:Buffer ) = limI .  
  op getTime : Address Buffer -> Float .
  ceq getTime(adsInput:Address, < ads f li limI limS > ; B:Buffer) = f  
    if (adsInput:Address == ads ) .
  eq getTime (adsInput:Address, < ads f li limI limS > ; B:Buffer) = getTime (adsInput:Address, B:Buffer) [owise] .
  eq getTime (adsInput:Address, none) = errorF .  
  ---eq getTime( ads , < ads f li limI limS >  B:Buffer ) = f .
  op getLastTime : Address Buffer -> Float .
  ceq getLastTime(adsInput:Address, < ads f li limI limS > ; B:Buffer) = li  
    if (adsInput:Address == ads ) .
  eq getLastTime (adsInput:Address, < ads f li limI limS > ; B:Buffer) = getLastTime (adsInput:Address, B:Buffer) [owise] .
  eq getLastTime (adsInput:Address, none) = errorF .
  ---eq getLastTime( ads , < ads f li limI limS > B:Buffer ) = li . 
  op getLimS : Address Buffer -> Nat .
  ceq getLimS(adsInput:Address, < ads f li limI limS > ; B:Buffer) = limS  
    if (adsInput:Address == ads ) .
  eq getLimS (adsInput:Address, < ads f li limI limS > ; B:Buffer) = getLimS (adsInput:Address, B:Buffer) [owise] .
  eq getLimS (adsInput:Address, none) = errorN .  
  ---eq getLimS( ads , < ads f li limI limS > B:Buffer ) = limS .  

--- Operadores do Buffer 
  op add : NBuffer EleBuf -> NBuffer .
  op size : NBuffer -> Nat . 
  op remove : Buffer Address -> Buffer .
  op removeEl : Buffer EleBuf -> Buffer .
  op _in_ : Address Buffer -> Bool .
  op search : Buffer Float -> Address .

  op update : NBuffer Address EleBuf -> NBuffer . 
  ceq update([ lenB:Nat | B1:Buffer ; < ads f li limI limS > ; B2:Buffer], inputAds:Address, < nads nf nli nlimI nlimS > )
   = [lenB:Nat | B1:Buffer ; < nads nf nli nlimI nlimS > ; B2:Buffer]
    if (ads == inputAds:Address) .
  eq update([ lenB:Nat | B1:Buffer ; < ads f li limI limS > ; B2:Buffer], inputAds:Address, < nads nf nli nlimI nlimS > )
   =   [lenB:Nat | B1:Buffer ; < ads f li limI limS > ; B2:Buffer] [owise] .
--- Implementações    

  eq add([ lenR:Nat | B:Buffer ] , eleBuf ) = [ s(lenR:Nat) | B:Buffer ; eleBuf ] . 
  eq size([ lenR:Nat | B:Buffer ]) = lenR:Nat .
  ---eq update([lenR:Nat | < ads f li limI limS > ; B:Buffer] , < ads f li limI limS > , < nads nf nli nlimI nlimS > ) = 
  ---    [ (lenR:Nat) | < nads nf nli nlimI nlimS >  ; B:Buffer ] .
  ---eq update([lenR:Nat | B:Buffer], < ads f li limI limS >, < nads nf nli nlimI nlimS > ) = 
  ---    [ lenR:Nat | < ads f li limI limS > B:Buffer ] [owise] .


 ceq remove(B1:Buffer ; eleBuf ; B2:Buffer, ads ) = B1:Buffer ; B2:Buffer 
  if ads == getAddress(eleBuf) .	
  eq remove(B1:Buffer ; eleBuf ; B2:Buffer, ads) = B1:Buffer ; eleBuf ; B2:Buffer [owise] .

  --- *** implementacao do operador IN *** ---
  ceq ads in B1:Buffer ; eleBuf ; B2:Buffer = true 
    if ads == getAddress(eleBuf) .
  eq ads in B1:Buffer ; eleBuf ; B2:Buffer = false [owise] .

--- Fim do Buffer
  
***( Funcoes ASV )***
op tMedio : -> Float .
op tMax : -> Float .
eq tMedio = 5.0 .
eq tMax = 5.0 .

op accept-prob : Float -> Float .
eq accept-prob(pmod) = floor(lenBufSeVen) / pmod .

---eq swap(eleBuf B:Buffer, neleBuf, s(i)) = neleBuf B:Buffer .


--- creates a tournament (with size n) by selecting elements from NBuffer and adding in Buffer
  --- 1st parameter: NBuffer - current NBuffer
  --- 2nd parameter: Nat - Size of the tournament.
  --- 3nd parameter: Buffer (output) - Buffer with all requests selected. init: Buffer = none
  --- 4th parameter: Nat - counter used to check when it reaches the size of the tournament. init: cnt = 0
op creatingTour : NBuffer Nat Buffer Nat -> Buffer .
---ceq creatingTour([sizeBuf | eleBuf ; B:Buffer], sizeTour, newBuf:Buffer, cnt) = creatingTour([sizeBuf + (- 1) | B:Buffer], sizeTour, 
---  selectRandom(B:Buffer, sampleUniWithInt(sizeBuf), eleBuf) ; newBuf:Buffer, cnt + 1)
---  selectRandom(B:Buffer, 1, eleBuf) ; newBuf:Buffer, cnt + 1)
---    if cnt < sizeTour .


var eleBufDrp : EleBuf .
var remBuf : Buffer .

ceq creatingTour([sizeBuf | B1:Buffer ; eleBuf ; B2:Buffer], sizeTour, newBuf:Buffer, cnt) 
 = creatingTour([sizeBuf + (-1) | remove(B1:Buffer ; eleBuf ; B2:Buffer, getAddress(selectRandom(B1:Buffer ; eleBuf ; B2:Buffer, sampleUniWithInt(sizeBuf), eleBuf)))], 
                  sizeTour, 
                    newBuf:Buffer ; selectRandom(eleBuf ; B1:Buffer ; eleBuf ; B2:Buffer, sampleUniWithInt(sizeBuf), eleBuf), 
                      cnt + 1) 
    if cnt < sizeTour .
---/\ eleBufDrp := selectRandom(eleBuf ; B:Buffer, sampleUniWithInt(sizeBuf), eleBuf)
---/\ remBuf := removeEl(eleBuf ; B:Buffer, eleBufDrp) .

---/\ eleBufDrp := selectRandom(eleBuf ; B:Buffer, sampleUniWithInt(sizeBuf), eleBuf)
---/\ remBuf := removeEl(eleBuf ; B:Buffer, selectRandom(eleBuf ; B:Buffer, sampleUniWithInt(sizeBuf), eleBuf)) .


ceq creatingTour([sizeBuf | B1:Buffer ; eleBuf ; B2:Buffer], sizeTour, newBuf:Buffer, cnt) = newBuf:Buffer
  if cnt >= sizeTour .
eq creatingTour([sizeBuf | none], sizeTour, newBuf:Buffer, cnt) = newBuf:Buffer .

--- selects a random EleBuf from Buffer
  --- 1st parameter: Buffer - current Buffer
  --- 2nd parameter: Nat - Random number. Init: sampleUniWithInt(size of the buffer)
  --- 3rd parameter: EleBuf - return the selected element of the buffer. Init: any eleBuf 
op selectRandom : Buffer Nat EleBuf -> EleBuf .
eq selectRandom(eleBuf ; B:Buffer, s(i), retEleBuf) = selectRandom(B:Buffer, i, eleBuf) .
eq selectRandom(eleBuf ; B:Buffer, 0, retEleBuf) = eleBuf .
eq selectRandom(none, i, retEleBuf) = retEleBuf .


--- selects the longest EleBuf in the buffer. 
  --- 1st parameter: Buffer - current Buffer
  --- 2nd parameter: EleBuf - elebuf that should be returned. Init: any eleBuf
  --- 3rd parameter: Nat - variable that stores the longest time (limS - limI). Init: 0
op selectGreatest : Buffer EleBuf Nat -> EleBuf .
ceq selectGreatest(< ads f li limI limS > ; B:Buffer, retEleBuf, greatest) = selectGreatest(B:Buffer, < ads f li limI limS >, limS + (- limI))
  if (limS + (- limI) > greatest) .
eq selectGreatest(< ads f li limI limS > ; B:Buffer, retEleBuf, greatest)  = selectGreatest(B:Buffer, retEleBuf, greatest) [owise] .
---  if (limS + (- limI) <= longest) [owise] .
eq selectGreatest(none, retEleBuf, greatest) = retEleBuf  .


--- delayBig? I used such a value in order to have a more realistic scenario
op reply : Address Buffer Float -> [ScheduleList] .
ceq reply(server, < ads f li limI limS > ; B:Buffer, gt) = [gt + delayBig, (ads <- RINGING) , drop?] ; [gt, server <- REMOVE, 0] ; [gt, server <- UPDATE(ads),0] ; reply(server, B:Buffer, gt) 
  if (f == li) . --- fi == li -> pWait state
eq reply(server, < ads f li limI limS > ; B:Buffer, gt) = reply(server, B:Buffer, gt) [owise] .
eq reply(server , none , gt) = nil .

ops pIN pWAIT : -> Nat .
op alpha : -> Float .
eq pIN = 2 .
eq pWAIT = 8 .
eq alpha = 1.89 .


--- equation used when the actor is on phone for more than tMedio
op exBuf : Float Float -> Nat .
eq exBuf(gt:Float, f) = floor (rat (float(pWAIT) + exp( ((alpha * (gt:Float + (- f))) / tMedio ) )  ) ) .

---eq exBuf(gt:Float, f) = floor (rat (float(8) + exp( ((1.89 * (gt:Float + (- f))) / 5.0 ) )  ) ) .
--- pin = 2
--- pwait = 8
--- alfa = 1.89
--- eq = pwait + exp((alfa * (gt:Float + (-f) ) / tMedio)

--- changes the likelihood of each EleBuf being dropped when the buffer is full 
  --- 1st parameter: Buffer - current buffer
  --- 2nd parameter: Nat - just a counter. 0 is the correct parameter
  --- 3nd parameter: Float - current time
op alBuf : Buffer Nat Float -> Buffer . --- alterar buffer
ceq alBuf(< ads f li limI limS > ; B:Buffer, n:Nat, gt:Float) = < ads f li n:Nat (n:Nat + (pWAIT + (- 1)) ) > ; alBuf(B:Buffer, (n:Nat + pWAIT), gt:Float) --- tentando
  if li == f . --- pWait case
ceq alBuf(< ads f li limI limS > ; B:Buffer, n:Nat, gt:Float) = < ads f li n:Nat (n:Nat + (pIN + (- 1)) ) > ; alBuf(B:Buffer, (n:Nat + pIN), gt:Float) --- session conectado <= tMedio 
  if (li =/= f) and gt + (- f) <= tMedio . --- pIN case when time <= tMedio
---ceq alBuf(< ads f li limI limS > B:Buffer, n:Nat) = < ads f li n:Nat (n:Nat + 6) > alBuf(B:Buffer, (n:Nat + 7)) --- session conectado > tMedio
ceq alBuf(< ads f li limI limS > ; B:Buffer, n:Nat, gt:Float) = < ads f li n:Nat  (n:Nat + exBuf(gt:Float,f) ) > ; alBuf(B:Buffer,  (n:Nat + exBuf(gt:Float,f) + 1 ), gt:Float )
  if (li =/= f) and gt + (- f) > tMedio . --- pIN case when time > tMedio
eq alBuf(none ; B:Buffer, n:Nat, gt:Float) = B:Buffer [owise] .

op posRand : -> Float .
ceq posRand = - rand
  if rand < 0.0 .
eq posRand = rand [owise] . 

--- modulus operator
op modOp : Float Float -> Float .
eq modOp (x, y) = (x + (- y)) * floor(x / y) .


--- exponential
op expRan : -> Float .
eq expRan = log(1.0 + (- posRand)) / (- 1.0 / tMedio)  .
---eq expRan =  log(1.0 + (- modOp(rand,101.0))) / (- 1.0 / tMedio)  .


--- logNormalRand
ops aux variance PI mu sigma logNormalRand : -> Float .
eq PI = 3.14159265358979323846 .
eq variance = 131301.0 .
eq aux = sqrt (variance + (tMedio * tMedio)) .
eq mu = log ( (tMedio * tMedio) / aux) .
eq sigma = sqrt(log((aux * aux) / (tMedio * tMedio) )) .
eq logNormalRand = exp(sigma * sqrt(- 2.0 * log( posRand )) * cos( 2.0 * PI * posRand ) + mu) .
---eq logNormalRand = exp(sigma * sqrt(- 2.0 * log( rand )) * cos( 2.0 * PI * rand ) + mu) .


--- select
sort ActorBuffer .
op <_$_> : Address Buffer -> ActorBuffer .
op getBufActorBuffer : ActorBuffer -> Buffer .
eq getBufActorBuffer(< ads $ B:Buffer >) = B:Buffer .
op getAdsActorBuffer : ActorBuffer -> Buffer .
eq getAdsActorBuffer(< ads $ B:Buffer >) = ads .
op select : Float NBuffer -> ActorBuffer .

  op arate : Float -> Config .    ---- current attack rate
  op crate : Float -> Config .    ---- current client request rate

--------------- Uniform ---------------
***(
 ---var BufDrp : Buffer .
 ---var addDr : Address . 
   var eleDr : EleBuf .
 var NBuf : NBuffer .

 op addDr : -> Address .
 op BufDrp : -> Buffer . 

 op adsTMP : -> Address .

--- op remove : Buffer Address -> Buffer .
op uniform : Float NBuffer -> ActorBuffer .
ceq uniform(gt, NBuf) = < addDr $ BufDrp > 
 if addDr := getAddress(selectRandom(getBuffer(NBuf), sampleUniWithInt(getLenBuf(NBuf)), < adsTMP gt gt 0 0 > )) 
 /\ BufDrp := remove(getBuffer(NBuf), addDr) . 
)
***( 
 if eleDr := selectRandom(getBuffer(NBuf), sampleUniWithInt(getLenBuf(NBuf)), < adsTMP gt gt 0 0 > )
 /\ addDr := getAddress(eleDr)
 /\ BufDrp := remove(getBuffer(NBuf),addDr, < adsTMP gt gt 0 0 >) .
)
--------------- Uniform ---------------


  ops lenPRAGMA lenGET : -> Nat .
  op ran : Nat -> Bool .
  op len : Nat -> Nat .
  ops lenBuf lenTourSeVen : -> Nat .
  ops Ts Tc S SA LIMIT lenBufSeVen : -> [Float] .
  op  J  : Float Float -> [Nat] .
  op  initDelay : -> [Float] .
  op  delay : -> [Float] .
  op  delayBig : -> [Float] .
  op  timeforCall : -> [Float] .
  op  drop? : -> [Nat] .
  ops newAlpha newRho : -> [Float] .
  ops numberClient numberAttacker : -> Nat .

  op factor : -> Nat .
  eq factor = 1 .
  op K : -> Float .
  --- eq K = 325.0 . --- * 4.0 .
  eq K = float(factor) * 325.0 . --- * 325.0 .
  eq numberClient = factor * 120 .  --- number of clients
  --- eq numberClient = 120 .  --- number of clients
  eq numberAttacker = factor * 120 . --- number of attackers
  --- eq numberAttacker = 120 . --- number of attackers
  eq newAlpha =  (float(numberAttacker) / 4800.0) . ---0.001666667  . --- atacante 
  eq newRho = (float(numberClient)  / 4800.0) .  --- cliente (0.08 - 192)
  eq lenBufSeVen = float(factor) * 24.0 . --- 24.0
  --- eq lenBufSeVen = 24.0 . --- 24.0
  eq lenTourSeVen = 12 . --- lenBufSeVen / 2.0 .  
  eq S = (K / 2.0) . ---Rate: 1: (K / 2.0) + (K / 2.0) ; 2: ((2.0 * K) / 3.0) + (K / 3.0) ; 5: ((5.0 * K) / 6.0) + (K / 6.0)
  eq SA = (K / 2.0) . ---Rate: 1: (K / 2.0) + (K / 2.0) ; 2: ((2.0 * K) / 3.0) + (K / 3.0) ; 5: ((5.0 * K) / 6.0) + (K / 6.0)
  eq Ts = 0.2 . --- round
  eq Tc = 0.2 .
  eq LIMIT = 40.0 . --- total time of the simulation
  eq initDelay = 0.05 .
  eq delay = 0.1 .
  eq delayBig = 0.3 .
  eq timeforCall = 1.0 .
  eq drop? = 0 .
  eq ran(N:Nat) = float(random(N:Nat) / 4294967295) > 0.5 .


--- VARIABLES
  vars Ser Cli Actor : Address . --- Server, Client, Attacker
  var AS : AttributeSet . --- AttributeSet
  vars gt Rho r Alpha pmod t t' : Float . --- global time
  var  tts : Float . --- Tempo entre um request e um response
  vars i i' j k N lenR lenP : Nat . --- contains the count of requests that have already been sent
  var SL : ScheduleList .
  var m : Msg .
  vars P R : Buffer . 
  var lenPack : Nat .
  
--- END OF VARIABLES

--- ESTADO INICIAL
var SCH : Scheduler .
op buffer : -> Buffer .
op attributeS : -> AttributeSet .
op initial : -> Config .
op initStat : -> Config . 
op initState : -> Config . 
op scheduleList : -> ScheduleList .
	

--- initial state  
eq initState = flag(true, 1.0) arate(newAlpha) crate(newRho)  ---{ 0.0 | nil } 
	<name: server | req-cnt: 1.0 , conn-set: [0 | none] , req-set: [0 | none] , cnt: 0 , suc-get: 0 , none > 
	<name: g | server: server, cnt: 0 , none > ---(g <- spawn)
	<name: ga | server: server, cnt: 0 , none >
      mytick(insert( insert( insert ({ 0.0 | nil} , [ initDelay, (ga <- spawn ), 0 ] ), [ initDelay , (g <- spawn ), 0 ] ), [ Ts, (server <- TIMEOUT), 0] ) )  .
---mytick(insert( insert ({ 0.0 | nil } , [ initDelay , (g <- spawn ), 0 ] ), [ Ts, (server <- TIMEOUT), 0] ) ) .
	--- mytick( insert( { 0.0 | nil }, [ initDelay, (g <- spawn), 0] ) ) .
---mytick(insert( { 0.0 | nil } , 
	---	  [ initDelay , (g <- spawn ), 0 ] ) ) .	

--- rewriting rules start here
  crl[stop] :
     flag(true,r) { gt | SL }
   =>
     flag(false,r) mytick({gt | SL})
      if gt >= LIMIT .

--- SeVen / App ---

op emptyServer : -> Actor .
op checkEmpty : Config -> Bool .
eq checkEmpty (emptyServer C:Config) = true .
eq checkEmpty (C:Config) = false [owise] .

op p1 : -> Bool .
vars ConfAcc ConfAcc2 ConfRej : Config .
vars SchAcc SchAcc2 SchRej : Scheduler .
var ActorDr : Address .
var bufDr : Buffer .
vars nBufP nBufR p-setNu r-setNu : NBuffer .  
--- models SeVen acting: when the buffer is full, SeVen creates a tournament(n) and selects (or not) the longest EleBuf in the buffer to be dropped. 
--- when the buffer is not full, seven adds the incoming request

***(
crl [ServerINVITE] : 
     flag(true, r) { gt | SL }
     <name: Ser | req-cnt: pmod , conn-set: [lenP | P] , req-set: [lenR | R], cnt: i , suc-get: k ,  AS > 
     (Ser <- INVITE(Actor))
     => flag(gt <= LIMIT * r, r)
      if (float(lenP) >= floor(lenBufSeVen)) then --- buffer is full
         if p1 then 
            ConfAcc mytick(SchAcc)
         else 
            ConfRej mytick(SchRej)
         fi
      else ConfAcc2  mytick(SchAcc2)
      fi
      if p1 := sampleBerWithP(accept-prob(pmod))
        /\ < ActorDr ; bufDr > := select(gt,[lenP | P])
        /\ nBufP := add([lenP | bufDr], < Actor gt gt 0 0 >)
        /\ nBufR := add([lenR | R], < Actor gt gt 0 0 >)
        /\ ConfAcc := <name: Ser | req-cnt: (pmod + 1.0), req-set: nBufR, conn-set: nBufP , cnt: i , suc-get: k , AS >
        /\ SchAcc := insert({gt | SL}, {gt, Actor <- TRYING} ; {gt, ActorDr <- poll})
        /\ ConfRej := <name: Ser | req-cnt: pmod , conn-set: [lenP | P] , req-set: [lenR | R], cnt: i , suc-get: k ,  AS > 
        /\ SchRej := insert({gt | SL}, [gt + delay , Actor <- poll, 0])
        /\ p-setNu := add( [lenP | P], < Actor gt gt 0 0 > )
        /\ r-setNu := add( [lenR | R], < Actor gt gt 0 0 > )
        /\ ConfAcc2 := <name: Ser | req-cnt: pmod, conn-set: p-setNu, req-set: r-setNu, cnt: i , suc-get: k , AS >
        /\ SchAcc2 := insert({gt | SL}, [gt + delay, Actor <- TRYING, 0]) . 
)
 
  rl [ServerINVITE] : 
     flag(true, r) { gt | SL }
     <name: Ser | req-cnt: pmod , conn-set: [lenP | P] , req-set: [lenR | R], cnt: i , suc-get: k ,  AS > 
     (Ser <- INVITE(Actor))
     => flag(gt <= LIMIT * r, r)
      if (float(lenP) >= floor(lenBufSeVen)) then --- buffer is full
	  	      if (sampleBerWithP(accept-prob(pmod))) then --- SeVen decides to process the incoming request
                <name: Ser | req-cnt: (pmod + 1.0) , conn-set: add([lenP + (-1) | 
                  getBufActorBuffer(select(gt,[lenP | P]))], < Actor gt gt 0 0 > ), 
                  req-set: add( [lenR | R], < Actor gt gt 0 0 > ), cnt: s(i) , suc-get: 0, AS >
                  mytick(insert( insert({ gt | SL}, [gt + delay, Actor <- TRYING, 0] ), [gt, 
                  getAdsActorBuffer(select(gt, [lenP | P])) <- poll, 0] ) ) 
		        else --- SeVen decides to not process the incoming request
	           <name: Ser | req-cnt: (pmod + 1.0) , conn-set: [lenP | P] , req-set: [lenR | R], cnt: s(i) , suc-get: k , AS >
   		       mytick(insert( { gt | SL } , [ gt + delay , (Actor <- poll), 0 ] ) )
            fi 
      else --- Buffer is not full
	     	   <name: Ser | req-cnt: pmod , conn-set: add( [lenP | P], < Actor gt gt 0 0 > ) , 
            req-set: add( [lenR | R], < Actor gt gt 0 0 > ), cnt: s(i) , suc-get: s(k) , AS >
	            mytick(insert({ gt | SL}, [gt + delay, Actor <- TRYING, 0] ) )	
		  fi .


--- models when SeVen/app receives a BYE message from a user. SeVen/app checks whether the user is currently in the buffer, if so, it removes the user from it.
    rl [ServerBYE] : 
     	flag(true, r) { gt | SL }
     	<name: Ser | req-cnt: pmod , conn-set: [lenP | P] , req-set: [lenR | R], cnt: i , suc-get: k ,  AS > 
    	 (Ser <- BYE(Actor))
     => flag(gt <= LIMIT * r, r)
    	if(Actor in P) then --- user is in the buffer
      	<name: Ser | req-cnt: pmod , conn-set: [lenP + (-1) | remove(P, Actor) ] , req-set: [lenR | R], cnt: i , suc-get: k , AS > 
      	 mytick(insert( { gt | SL } , [ gt + delay , (Actor <- ACK), 0 ] ) ) 
    	else --- user is not in the buffer
      	<name: Ser | req-cnt: pmod , conn-set: [lenP | P] , req-set: [lenR | R], cnt: i , suc-get: k ,  AS > 
      	mytick({gt | SL }) 
	    fi .
	
  --- resets the buffer R after R being processed by SeVen 
    rl [ServerRemove] :
       flag(true, r) 
       <name: Ser | req-cnt: pmod , conn-set: [lenP | P] , req-set: [lenR | R], cnt: i , suc-get: k , AS > 
      (Ser <- REMOVE) { gt | SL }
     => flag(gt <= LIMIT * r, r)
    	<name: Ser | req-cnt: pmod , conn-set: [lenP | P] , req-set: [0 | none], cnt: i , suc-get: k , AS >
    	mytick({ gt | SL }) . 

 --- whenever SeVen/app sends a RINGING to a user, this RL updates the status of the user from pWait -> pIN.
    rl [ServerUpdate] :
    	flag(true,r)
    	<name: Ser | req-cnt: pmod , conn-set: [lenP | P] , req-set: [lenR | R], cnt: i , suc-get: k , AS > 
      (Ser <- UPDATE(Actor)) { gt | SL }	
    => flag(gt <= LIMIT * r, r)
	     <name: Ser | req-cnt: (pmod) , conn-set: update([lenP | P], Actor, < Actor getTime(Actor, P) gt getLimI(Actor, P) getLimS(Actor, P) > ) , 
       req-set: [lenR | R], cnt: i , suc-get: k , AS >
       mytick({gt | SL }) .		


--- models SeVen's ROUND: if there is any user in buffer R, he/she will proccessed by reply equation.
    rl [ServerTimeoutReq] : 
       flag(true, r) 
       <name: Ser | req-cnt: pmod , conn-set: [lenP | P] , req-set: [lenR | R], cnt: i , suc-get: k , AS > 
       (Ser <- TIMEOUT) { gt | SL }
     => flag(gt <= LIMIT * r, r)
       if(lenR =/= 0) then
        	<name: Ser | req-cnt: (floor(lenBufSeVen) + 1.0) , conn-set: [lenP | P] , req-set: [lenR | R], cnt: i , suc-get: k , AS >  
        	mytick( insert( insertList( { gt | SL } , reply(Ser, P, gt) ) , [ gt + Ts , (server <- TIMEOUT), 0] )) 
       else
          <name: Ser | req-cnt: (floor(lenBufSeVen) + 1.0) , conn-set: [lenP | P] , req-set: [lenR | R], cnt: i , suc-get: k , AS >
          mytick(insert ( { gt | SL}, [ gt + Ts, (server <- TIMEOUT), 0 ]  ) )  

       fi .             

--- END OF SERVER ---


--- CLIENT ---

***(
--- Experimento 0
--- (1.0  / (Rho * S)) = K grande o suficiente, mas nao tao grande
--- 80% buffer ocupado somente com clientes

--- (1.0  / (Alpha * SA)) + (1.0  / (Rho * S)) = K
--- Experimento 1: 1 - 1
--- (1.0  / (Alpha * SA)) = (1.0  / (Rho * S)) = K/2
--- Experimento 2: 1 - 2
--- (1.0  / (Alpha * SA)) = 2 x (1.0  / (Rho * S)) 
---       2 * K / 3                 K / 3 
--- Experimento 3: 1 - 3
--- (1.0  / (Alpha * SA)) = 2 x (1.0  / (Rho * S)) 
---       3 * K / 4                 K / 4
--- ... 
)

--- Clients coming in at the rate of Rho * S
    eq crate(Rho)
     <name: g | server: Ser, cnt: i , AS > (g <- spawn) { gt | SL }
     = crate(Rho)
        <name: g | server: Ser , cnt: s(i) , AS > 
        <name: c(i) | server: Ser , retries: 0 , atime: gt , stime: Infinity , status: none , AS > 
        mytick(insert(insert( { gt | SL } ,
           [ gt  , (c(i) <- poll), 0 ] ) ,
	   [ (1.0  / (Rho * S)) + (gt)  , (g <- spawn), 0 ] ) ) .
    ---    if numberClient > i . 

 --- sends an INVITE message to SeVen/app: it goes from state none to invite
   rl [CliSendINVITE] : 
        flag(true, r) crate(Rho) arate(Alpha)
        <name: c(i) | server: Ser , retries: j , status: none, AS >
        (c(i) <- poll) { gt | SL }
     => flag(gt <= LIMIT * r, r) crate(Rho) arate(Alpha)
          <name: c(i) | server: Ser , retries: j , status: invite, AS >
          mytick(insert ( { gt | SL}, [ gt + delay, (Ser <- INVITE(c(i))), 0 ]  )  ) .

 --- receives TRYING message from SeVen/app: the state keeps unchanged
    rl [CliRecTRYING] : 
        flag(true, r) { gt | SL }
        <name: c(i) | server: Ser , retries: j , status: invite, AS >
       (c(i) <- TRYING)
     => flag(gt <= LIMIT * r, r)
      	<name: c(i) | server: Ser , retries: j , status: invite, AS >      	
      	mytick({ gt | SL }) .

 ---op callDuration : Float -> Float .
 --- receives RINGING message from SeVen/app: it goes from state invite to connected.
 --- in the following, you shall select the probabilistic distribution (logNormalRand or expRan) for sending the message BYE
    rl [CliRecRINGING] : 
        flag(true, r) { gt | SL }
        <name: c(i) | server: Ser , stime: Infinity , retries: j , status: invite, AS > 
        (c(i) <- RINGING )
     => flag(gt <= LIMIT * r, r)
    ---    <name: c(i) | server: Ser , stime: ( logNormalRand + gt) , retries: j , status: connected, AS >
    ---    mytick(insert( { gt | SL } , [ (logNormalRand + gt), (Ser <- BYE(c(i)) ), 0 ] ) )  . 
       <name: c(i) | server: Ser , stime: (expRan + gt) , retries: j , status: connected, AS >
        mytick(insert( { gt | SL } , [ (expRan + gt), (Ser <- BYE(c(i)) ), 0 ] ) )  .  

 --- receives pool message from SeVen/app: it means that the user has been removed from SeVen/app's buffer during his/her call
 --- therefore, it goes from state connected none to incomplete       
   rl [CliEnd-Incomplete-drop] :
        flag(true,r) { gt | SL }
        (c(i) <- poll)
        <name: c(i) | server: Ser , retries: j , status: connected, AS >
     => flag(gt <= LIMIT * r, r)
        <name: c(i) | server: Ser , atime: gt, retries: j , status: incomplete, AS >
        mytick({ gt | SL }) .

--- receives ACK message from SeVen/app: it goes from state connected to finished
   rl [CliEnd-Complete] :
      flag(true,r) { gt | SL }
      <name: c(i) | server: Ser , retries: j , status: connected, AS > 
      (c(i) <- ACK)
     => flag(gt <= LIMIT * r, r)
      <name: c(i) | server: Ser , retries: j , status: finished, AS >
      mytick({ gt | SL }) .

--- receives poll message from SeVen/app: the state keeps unchanged
    rl [CliEnd-Incomplete-drop2] :
        flag(true,r) { gt | SL }
        (c(i) <- poll)
        <name: c(i) | server: Ser , retries: j , status: invite, AS >
     => flag(gt <= LIMIT * r, r)
         <name: c(i) | server: Ser , retries: j , status: invite, AS >
        mytick({ gt | SL }) .

--- Just in case something weird happens with the model
    rl [CliNotRestartAfterRINGING] :
      flag(true,r) { gt | SL }
      (c(i) <- RINGING)
      <name: c(i) | server: Ser , retries: j , status: connected, AS >
     => flag(gt <= LIMIT * r, r)
      <name: c(i) | server: Ser , retries: j , status: connected, AS > 
      mytick({ gt | SL }) . 

--- Just in case something weird happens with the model
   rl [CliEnd-Incomplete-drop2] :
        flag(true,r) { gt | SL }
        (c(i) <- poll)
        <name: c(i) | server: Ser , retries: j , status: incomplete, AS >
     => flag(gt <= LIMIT * r, r)
         <name: c(i) | server: Ser , retries: j , status: incomplete, AS >
         mytick({ gt | SL }) .

--- Just in case something weird happens with the model
   rl [CliEnd-ACK-with-incomplete] :
      flag(true,r) { gt | SL }
      <name: c(i) | server: Ser , retries: j , status: incomplete, AS >
      (c(i) <- ACK)
     => flag(gt <= LIMIT * r, r)
      <name: c(i) | server: Ser , retries: j , status: incomplete, AS >
      mytick({ gt | SL }) .   

--- END OF CLIENT ---

--- ATTACKER ---


--- Attackers coming in at the rate of Rho * S
    eq arate(Alpha)
       <name: ga | server: Ser, cnt: i , AS > (ga <- spawn) { gt | SL }
     = arate(Alpha)
        <name: ga | server: Ser , cnt: s(i) , AS > 
        <name: a(i) | server: Ser , atime: gt , stime: Infinity ,status: none , AS >  
        mytick(insert(insert( { gt | SL } ,
           [ gt  , (a(i) <- poll), 0 ] ) ,
	     [ (1.0  / (Alpha * SA)) + (gt)  , (ga <- spawn), 0 ] ) ) .
   --- if numberAttacker > i .

--- sends an INVITE message to SeVen/app: it goes from state none to invite
  rl [ATSendINVITE] : 
        flag(true, r) arate(Alpha) crate(Rho)
        <name: a(i) | server: Ser , status: none , AS > 
        (a(i) <- poll) { gt | SL }
     => flag(gt <= LIMIT * r, r) arate(Alpha) crate(Rho)
        <name: a(i) | server: Ser , status: invite , AS > 
        mytick(insert( { gt | SL } ,
        [ gt + delay, (Ser <- INVITE(a(i))), 0 ] ) ) .

 --- receives TRYING message from SeVen/app: the state keeps unchanged
 rl [ATSendRecTRYING] : 
        flag(true, r) arate(Alpha) crate(Rho)
        <name: a(i) | server: Ser , status: invite , AS > 
        (a(i) <- TRYING) { gt | SL } 
     => flag(gt <= LIMIT * r, r) arate(Alpha) crate(Rho)
        <name: a(i) | server: Ser, status: invite , AS >
        mytick({ gt | SL }) . 
        ---mytick(insert( { gt | SL } ,[ gt + delay + delay + delay + delay, (a(i) <- poll), 0 ] ) )   .

--- receives RINGING message from SeVen/app: it goes from state invite to oncall. Note that the attacker
--- does not send a bye message.
   rl [ATRecRINGING] : 
        flag(true, r) arate(Alpha) crate(Rho)
        <name: a(i) | server: Ser , status: invite , AS > 
        (a(i) <- RINGING) { gt | SL } 
     => flag(gt <= LIMIT * r, r) arate(Alpha) crate(Rho)
        <name: a(i) | server: Ser, status: oncall ,AS >
        mytick({ gt | SL }) . 
	 ----mytick(insert( { gt | SL } , [ gt + delay, (Ser <- INVITE(a(i))), 0 ] ) ) .
 	---mytick(insert( insert ( { gt | SL } , [ gt + delay, (Ser <- GET(a(i),len(lenGET))), 0 ] ), [ gt + delay + delay, (a(i) <- poll), 0] ) ) .
  
 --- receives poll message from SeVen/app: the state keeps unchanged 
    rl [Restart-Timeout-Attacker-none2] :
    	(a(i) <- poll) { gt | SL } 
    	<name: a(i) | server: Ser , status: invite , AS >  
   =>
      <name: a(i) | server: Ser , status: invite , AS  >
      mytick({ gt | SL } ) .

--- receives poll message from SeVen/app: the state keeps unchanged
   rl [attack-end] :
      (a(i) <- poll) { gt | SL } 
      <name: a(i) | server: Ser, status: oncall , AS >  
     =>
      <name: a(i) | server: Ser, status: oncall , AS  >
      mytick({ gt | SL } ) .


--- END OF ATTACKER ---	


--- *** PVeSTa *** ---

---var lenP : Float .
var C : Config .
var b : Bool .
var pv-f : Float .
op countConnectedAT : Float Config -> Float .
op countConnectedFIN : Float Config -> Float .
op countConnectedCON : Float Config -> Float .
op countConnectedIN : Float Config -> Float .
op countConnectedDoS : Float Config -> Float .
op  countClients : Config -> Float .
op countAttackers : Config -> Float .
op countDenialPragma : Config -> Float .
op countConAttacker : Float Config -> Float .
op val : Nat Config -> Float .
op sat : Nat Config -> Bool .
op networkTraffic : Config -> Float .
op countPragma : Config -> Float .

--- Success Probability
op hasConnected : Nat Config -> Float .

eq hasConnected(i, <name: c(i) | status: connected , AS > C ) = 1.0 .
eq hasConnected(i, C) = 0.0 [owise] .

eq countConnectedFIN(pv-f, <name: c(i) | status: finished , AS > C ) = countConnectedFIN(pv-f + 1.0 , C) .
eq countConnectedFIN(pv-f,C) = pv-f [owise] .

***(
eq countConnected(pmod, <name: c(i) | status: connected , call: complete,  AS > C ) = countConnected(pmod + 1.0 , C) .
eq countConnected(pmod,C) = pmod [owise] .
)***
---***(
eq countConnectedIN(pv-f, <name: c(i) | status: incomplete,  AS > C ) = countConnectedIN(pv-f + 1.0 , C) .
eq countConnectedIN(pv-f,C) = pv-f [owise] .
---)***

eq countConnectedCON(pv-f, <name: c(i) | status: connected,  AS > C ) = countConnectedCON(pv-f + 1.0 , C) .
eq countConnectedCON(pv-f,C) = pv-f [owise] .

eq countConnectedDoS(pv-f, <name: c(i) | status: invite,  AS > C ) = countConnectedDoS(pv-f + 1.0 , C) .
eq countConnectedDoS(pv-f,C) = pv-f [owise] .



eq countClients(<name: g | cnt: i , AS > C) = float(i) .
eq countAttackers(<name: ga | cnt: i , AS > C) = float(i) .
eq networkTraffic(<name: Ser | cnt: i , suc-get: k , AS > C) = float(i) .


eq countConnectedAT(pv-f, <name: a(i) | status: oncall , AS > C ) = countConnectedAT(pv-f + 1.0 , C) .
eq countConnectedAT(pv-f,C) = pv-f [owise] .

  --- Average time-to-service
  op  avgTTS : Config -> Float .
  op  sumTTS : Float Config -> Float .
 ceq avgTTS(C) = if r > 0.0 then sumTTS(0.0, C) / r else 0.0 fi 
                    if r := countConnectedIN(0.0, C) .
***(
  ceq sumTTS(pmod, <name: a(i) | atime: t , stime: t' , status: oncall , AS > C ) = sumTTS(pmod + ((40.0 + (- t))), C) 
    if (t' == Infinity) .
  ceq sumTTS(pmod, <name: a(i) | atime: t , stime: t' , status: oncall , AS > C ) = sumTTS(pmod + (t' + (- t)), C)
    if (not(t' == Infinity)) .
   
  eq sumTTS(pmod, C) = pmod [owise] .  
)***
 eq sumTTS(pv-f, <name: c(i) | atime: t , stime: t' , status: incomplete, AS > C )
     = sumTTS(pv-f + (t / t'), C) .
  eq sumTTS(pv-f, C) = pv-f [owise] . 

eq tick( flag(b, r) C ) = flag(true, r + 1.0) C .

eq sat(0,C) = if hasConnected(0, C) > 0.0 then true else false fi .
eq val(0,C) = countConnectedFIN(0.0,C) .
eq val(1,C) = countClients(C) .
eq val(2,C) = countAttackers(C) .
eq val(3,C) = (countConnectedFIN(0.0,C) + countConnectedCON(0.0, C)) / countClients(C) . 
eq val(4,C) = countConnectedIN(0.0, C) / countClients(C) .
eq val(5,C) = countConnectedDoS(0.0, C) / countClients(C) .
eq val(6,C) = avgTTS(C) .
eq val(7,C) = countPragma(C) .

endm	
