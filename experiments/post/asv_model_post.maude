mod SAMPLER is
  pr RANDOM .
  pr COUNTER .
  pr CONVERSION .

op sampleBerWithP : Float -> Bool .
  op sampleUniWithInt : Nat -> Nat .       
  op genRandom : Float Float -> [Float] .
  var n s : Nat .

  op rand : -> [Float] .
  rl [rnd] : rand => float(random(counter) / 4294967296) .

  op rrand : -> [Rat] .
  rl [rrnd] : rrand => random(counter) / 4294967296 .
	
  var R R1 Min Max : Float .

  eq sampleBerWithP(R) = if rand < R then true else false fi . 
  eq sampleUniWithInt(n) = floor(rrand * n) .
  eq genRandom(Min, Max) = rand * (Max - Min) + Min .

endm

mod AUXILIAR is

protecting NAT . 
protecting FLOAT .
protecting CONVERSION .

sort Contents .
sort Address .

sort Msg .
op _<-_ : Address Contents -> Msg . --- construtor Msg

sort ActiveMsg .
subsort ActiveMsg < Config .
op {_,_} : Float Msg -> ActiveMsg . --- Mensagem ativa

sort Actor .
sort ActorType . --- (atacante, servidor, client)
sorts Attribute AttributeSet .
subsort Attribute < AttributeSet .
op none : -> AttributeSet .
op _,_ : AttributeSet AttributeSet -> AttributeSet [assoc comm id: none] . --- Concatenar AttributeSET
op <name:_|_> : Address AttributeSet -> Actor . --- construtor actor
 
  op [__] : Msg Msg -> Msg .
  sort Config .
  subsorts Msg ActorType Actor < Config .

  sort Object .
  subsort Actor < Object . --- Actor can be represented by a term of sort Object
  subsort Msg < Object . --- Message can be represented by a term of sort Object
  subsort Object < Config .

--- Config
  op none : -> Config .
  op flag : Bool Float -> Config . ---- a flag delimiting execution rounds
  op __ : Config Config -> Config [assoc comm id: none] . --- construtor Config
--- END OF Config

--- SCHEDULER
  sorts Scheduler ScheduleMsg ScheduleList .
  subsorts ScheduleMsg Scheduler < ScheduleList .
  subsort Scheduler ScheduleMsg ScheduleList < Config .
  subsort Msg ActiveMsg < Scheduler .
  subsort Msg ActiveMsg < ScheduleList .

  op {_|_} : Float ScheduleList -> Scheduler .
  op  nil : -> ScheduleList .
  op  _;_ : ScheduleList ScheduleList -> ScheduleList [assoc id: nil] .
  op [_,_,_] : Float Msg Nat -> ScheduleMsg . --- Agendar envio de mensagem
--- END OF SCHEDULER


--- Scheduler Operation
  op insert : Scheduler ScheduleMsg -> Scheduler .
  op insert : ScheduleList ScheduleMsg -> ScheduleList .
  op insertList : Scheduler ScheduleList -> Scheduler .
  op insertList : ScheduleList ScheduleList -> ScheduleList .
--- End of List Operation

  op tick : Config -> Config .
  op mytick : Scheduler -> Config .
  op global-time : Scheduler -> Float .
  op getTime : Config -> Float .
	
  var t1 t2 t gt : Float .
  var C : Config .
  var O O1 : Object .
  var p i : Nat .
  var SL SL' : ScheduleList .
  var e : ScheduleMsg .
  var M1 M2 : Msg .

--- { float | Msg } --> ActiveMsg . 
  eq global-time({ gt | SL }) = gt .
  eq getTime(C {gt | SL}) = gt .  

  eq insert({ gt | SL },e) = { gt | insert(SL,e) } .
  eq insert(SL , [ t2 , M2, 1 ]) = SL .   
  eq insert([ t1 , M1, p ] ; SL , [ t2 , M2, 0 ]) = 
       if t1 < t2 then [ t1 , M1, p ] ; insert(SL, [ t2 , M2, 0 ]) 
                  else ([ t2 , M2, 0 ] ; [ t1 , M1, p ] ; SL) fi .
  eq insert( nil , [ t2 , M2, 0 ]) = [ t2 , M2, 0 ] .


  eq insertList({ gt | SL }, SL') = { gt | insertList(SL, SL') } .
  eq insertList(SL , [t2 , M2, p] ; SL') = insertList( insert(SL, [t2, M2, p]), SL' ) .
  ---eq insertList( nil , SL') = SL' .
  eq insertList( SL , nil ) = SL .

  eq mytick({ gt | [ t1 , M1, p ] ; SL }) = M1 { t1 | SL } .


endm

mod teste is 

protecting NAT . 
protecting FLOAT .
protecting AUXILIAR .
protecting RANDOM .
pr COUNTER .
protecting CONVERSION .
protecting SAMPLER .


vars eleBuf neleBuf : EleBuf .
vars ads nads : Address .
vars f nf li nli : Float .
vars contL bytes ncontL nbytes : Nat .

--- PACKAGES
  op POST : Address Nat -> Contents .
  op DATA : Address Nat -> Contents .
  op GET : Address Nat -> Contents .
  op PRAGMA : Address Nat -> Contents . --- endereço, tamanho do pacote pragma
  op ACK : -> Contents .
  op END : -> Contents .
  op TIMEOUT : Address -> Contents .
  op TIMEOUT : -> Contents .
  op CONNECT : -> Contents .
  op REMOVE : -> Contents .
  op SendData : -> Contents .

  ops spawn poll restart itimeout : -> Contents .

--- END OF PACKAGES

--- SERVER
  op server:_ : Address -> Attribute .	
  op req-cnt:_ : Float -> Attribute .
  op req-set:_ : NBuffer -> Attribute .
  op conn-set:_ : NBuffer -> Attribute . 
  op cnt:_ : Nat -> Attribute .
  op suc-get:_ : Nat -> Attribute .
--- END OF SERVER 

--- CLIENT
  sort Status .
  ops waiting connected failed : -> Status .
  op status:_ : Status -> Attribute [gather(&)] .
  op retries:_ : Nat -> Attribute .
  op rep-cnt:_ : Nat -> Attribute .
  op atime:_ : Float -> Attribute .  
  op stime:_ : Float -> Attribute .  

--- END OF CLIENT 

--- ATTACKER
  ops none get pragma post data : -> Status .
  op step:_ : Status -> Attribute [gather(&)] .
  op cnt-pragma:_ : Nat -> Attribute .
--- END OF ATTACKER

--- Object names
  op g  :     -> Address .   --- generator
  op ga : -> Address . --- generator attackers
  op c  : Nat -> Address .   --- clients
  op a : Nat -> Address . --- attackers
  op At : -> Address . --- attacker
  op server : -> Address . --- Server
  op attacker : -> Address .

--- Buffer

  sorts EleBuf Buffer NBuffer .
  subsorts Address Float Buffer < NBuffer .
  subsort NBuffer < Attribute .
  subsort EleBuf < Buffer .
  
--- Elementos do Buffer 
 --- op <____> : Address Float Float Nat -> EleBuf . --- elementos do buffer (id, time da entrada, time da ultima requisição, tamanho get pack)
  op <_____> : Address Float Float Nat Nat -> EleBuf .
  op [_|_] : Nat Buffer -> NBuffer . --- NBuffer
  op none : -> Buffer .
  op __ : Buffer Buffer -> Buffer [comm assoc id: none] .   --- Construtor Buffer
  op getAddress : EleBuf -> Address .
  eq getAddress( < ads f li contL bytes > ) = ads . 
  op getBuffer : NBuffer -> Buffer .
  eq getBuffer( [SZ:Nat | B:Buffer] ) = B:Buffer .
  op getBytesPOST : Address Buffer -> Nat .
  eq getBytesPOST( ads , < ads f li contL bytes > B:Buffer ) = bytes .
  op getLenPOST : Address Buffer -> Nat .
  eq getLenPOST( ads , < ads f li contL bytes > B:Buffer ) = contL .  
  op getTime : Address Buffer -> Float .
  eq getTime( ads , < ads f li contL bytes >  B:Buffer ) = f .
  op getLastTime : Address Buffer -> Float .
  eq getLastTime( ads , < ads f li contL bytes > B:Buffer ) = li . 


--- Operadores do Buffer 
  op add : NBuffer EleBuf -> NBuffer .
  op size : NBuffer -> Nat . 
  op remove : Buffer Address -> NBuffer .
  op _in_ : Address Buffer -> Bool .
  op update : NBuffer EleBuf EleBuf -> NBuffer .
  op search : Buffer Float -> Address .

--- Implementações  

  eq add([ SZ:Nat | B:Buffer ] , eleBuf ) = [ s(SZ:Nat) | eleBuf B:Buffer ] . 
  eq size([ SZ:Nat | B:Buffer ]) = SZ:Nat .
eq update([SZ:Nat | < ads f li contL bytes > B:Buffer], < ads f li contL bytes >, < nads nf nli ncontL nbytes >) = [ (SZ:Nat) | < nads nf nli ncontL nbytes > B:Buffer] .
  eq update([SZ:Nat | B:Buffer], < ads f li contL bytes >, < ads f li contL bytes >) = < ads f li contL bytes > [ (SZ:Nat) | < ads f li contL bytes > B:Buffer ] [owise] .

  ceq search (eleBuf B:Buffer, gt ) = getAddress(eleBuf) 
	if (gt >= (getTime( getAddress(eleBuf) , B:Buffer ) ) + Tc ) .
  eq search(eleBuf B:Buffer, gt ) =  getAddress(eleBuf) [owise] .
    
  
 ceq remove(eleBuf B:Buffer, ads ) = B:Buffer 
  if ads == getAddress(eleBuf) .	
  eq remove(B:Buffer , ads) = B:Buffer [owise] .

  --- *** implementacao do operador IN *** ---
  ceq ads in eleBuf B:Buffer = true 
    if ads == getAddress(eleBuf) .
  eq ads in B:Buffer = false [owise] .

--- Fim do Buffer

***( Funcoes ASV )***
op accept-prob : Float -> Float .
eq accept-prob(p) = floor(S * Ts) / p .

---req-list: [SZ, swap(L, req(AN), sampleUniWithInt(SZ))]
op swap : Buffer EleBuf Nat -> Buffer .
eq swap(eleBuf B:Buffer, neleBuf, s(i)) = eleBuf swap(B:Buffer, neleBuf, i) .
eq swap(eleBuf B:Buffer, neleBuf, 0) = neleBuf B:Buffer .
eq swap(none, neleBuf, i) = none .
---eq swap(eleBuf B:Buffer, neleBuf, s(i)) = neleBuf B:Buffer .


op reply : Address Buffer Float -> [ScheduleList] .
ceq reply(server, < ads f li contL bytes > B:Buffer, gt) = [gt + delay , (ads <- ACK) , drop?] ; [gt , ads <- REMOVE , 0] ; reply(server, B:Buffer, gt)  
	if (contL == bytes) .
eq reply(server, < ads f li contL bytes > B:Buffer, gt) = reply(server, B:Buffer, gt) [owise] .
eq reply(server , none , gt) = nil .


op remo : Buffer -> Buffer .
ceq remo(< ads f li contL bytes > B:Buffer) = remo(< ads f li contL bytes > B:Buffer)  
	if (bytes < contL) .
eq remo(< ads f li contL bytes > B:Buffer) = B:Buffer  [owise] .
eq remo(none B:Buffer) = none .

***( Funcoes ASV )***

  op arate : Float -> Config .    ---- current attack rate
  op crate : Float -> Config .    ---- current client request rate


  ops data dataAT contentLenCLI contentLenATA dataCLI : -> Nat .
  op ran : Nat -> Bool .
  op len : Nat -> Nat .
  op lenBuf : -> Nat .
  ops Ts Tc S SA LIMIT : -> [Float] .
  op  J  : Float Float -> [Nat] .
  op initDelay : -> [Float] .
  op  delay : -> [Float] .
  op  drop? : -> [Nat] .
  ops newAlpha newRho : -> [Float] .
  eq newAlpha =  float(280 / 4800) . ---0.001666667  . --- atacante 
  eq newRho = float(200 / 4800) .  --- cliente (0.08 - 192)	
  eq S = 30.0 . --- 15(6), 30 (12), 45(18), 60(24), 75(30) 
  eq SA = 120.0 . 
  eq Ts = 0.4 . 
  eq Tc = 0.4 .
  eq LIMIT = 40.0 .
  eq J(Rho,Alpha) = 7 . --- the maximum number of consecutive time windows a client tries to send REQs to the server before it gives up 
  eq initDelay = 0.05 .
  eq delay = 0.1 .
  eq drop? = 0 .
 --- eq data = floor(random(3) / 10000000) .
 --- eq contentLen = floor(random(1) / 1000000) . 
  eq dataCLI = 10 . 
  eq contentLenCLI = 10 .
  ---eq data = 100 .
  eq dataAT = 1 .
  eq contentLenATA = 100 .
  
  eq ran(N:Nat) = float(random(N:Nat) / 4294967295) > 0.5 .


--- VARIABLES
  vars Ser Cli Actor : Address . --- Server, Client, Attacker
  var AS : AttributeSet . --- AttributeSet
  vars gt Rho r Alpha p t t' : Float . --- global time
  var  tts : Float . --- Tempo entre um request e um response
  vars i i' j k N SZ SZC : Nat . --- contains the count of requests that have already been sent
  var SL : ScheduleList .
---  var CONNECT : Contents .
  var m : Msg .
  vars Buf ListReq : Buffer . 
  vars conLen sbytes : Nat .
  
--- END OF VARIABLES

--- ESTADO INICIAL
var S : Scheduler .
op buffer : -> Buffer .
op attributeS : -> AttributeSet .
op initial : -> Config .
op initStat : -> Config . 
op initState : -> Config . 
op scheduleList : -> ScheduleList .
	
eq initState = flag(true, 1.0) arate(newAlpha) crate(newRho)  ---{ 0.0 | nil } 
	<name: server | req-cnt: 1.0 , conn-set: [0 | none] , req-set: [0 | none] , cnt: 0 , suc-get: 0 , none > 
	<name: g | server: server, cnt: 0 , none > ---(g <- spawn)
        <name: ga | server: server, cnt: 0 , none >
      mytick(insert( insert( insert ({ 0.0 | nil} , [ initDelay, (ga <- spawn ), 0 ] ), [ initDelay , (g <- spawn ), 0 ] ), [ Ts, (server <- TIMEOUT), 0] ) )  .
	---mytick(insert( insert ({ 0.0 | nil } , [ initDelay , (g <- spawn ), 0 ] ), [ Ts, (server <- TIMEOUT), 0] ) ) .
	--- mytick( insert( { 0.0 | nil }, [ initDelay, (g <- spawn), 0] ) ) .
---mytick(insert( { 0.0 | nil } , 
	---	  [ initDelay , (g <- spawn ), 0 ] ) ) .	

--- FIM DO ESTADO INICIAL

--- REESCRITAS ---
  crl[stop] :
     flag(true,r) { gt | SL }
   =>
     flag(false,r) mytick({gt | SL})
      if gt >= 40.00 .

--- SERVER ---

op emptyServer : -> Actor .
op checkEmpty : Config -> Bool .
eq checkEmpty (emptyServer C:Config) = true .
eq checkEmpty (C:Config) = false [owise] .

     rl [ServerPOST] : 
     	flag(true, r) { gt | SL }
     	<name: Ser | req-cnt: p , conn-set: [SZC | Buf] , req-set: [SZ | ListReq], cnt: i , suc-get: k ,  AS > 
    	 (Ser <- POST(Actor , len( conLen ))) 
     => flag(gt <= LIMIT * r, r)
         if (float(SZC) >= floor(S * Ts) and not(Actor in Buf) ) then --- se buffer de conexao esta cheio e o cliente n esta no buffer
		---emptyServer { gt | SL } ---***(
	    if (float(SZ) >= floor(S * Ts)) then --- se buffer de resposta esta cheio
	  	if (sampleBerWithP(accept-prob(p))) then --- se true, troca faz a trocar de Actors no buffer, cc faz nada
	  	   <name: Ser | req-cnt: (p + 1.0) , conn-set: [SZC | swap(Buf, < Actor gt gt conLen 0 >, sampleUniWithInt(SZC) )] , req-set: [SZ | swap(ListReq, < Actor gt gt 0 0 >, sampleUniWithInt(SZ))], cnt: s(i) , suc-get: s(k) ,AS > 
		mytick( insert( { gt | SL }, [ gt + Tc , (server <- TIMEOUT(Actor) ), 0] ) )
	        else
	           <name: Ser | req-cnt: (p + 1.0) , conn-set: [SZC | Buf] , req-set: [SZ | ListReq], cnt: s(i) , suc-get: k , AS >
	           mytick({gt | SL }) 
               fi 
            else --- se buffer de resposta n esta cheio, probabilidade em conexao e add em resposta
		if (sampleBerWithP(accept-prob(p))) then --- se true, troca faz a trocar de Actors no buffer, cc faz nada
	  	   <name: Ser | req-cnt: (p + 1.0) , conn-set: [SZC | swap(Buf, < Actor gt gt conLen 0 >, sampleUniWithInt(SZC) )] , req-set: add( [SZ | ListReq], < Actor gt gt 0 0 > ), cnt: s(i) , suc-get: s(k) ,AS > 
		mytick( insert( { gt | SL }, [ gt + Tc , (server <- TIMEOUT(Actor) ), 0] ) )
	        else
	           <name: Ser | req-cnt: (p + 1.0) , conn-set: [SZC | Buf] , req-set: [SZ | ListReq], cnt: s(i) , suc-get: k , AS >
	           mytick({gt | SL }) 
                fi
            fi --- )***
	else
	   if (float(SZC) < floor(S * Ts) and not(Actor in Buf)) then --- se conexao nao esta cheio e cliente n esta no buffer
	     if (float(SZ) >= floor(S * Ts)) then --- se buffer de resposta esta cheio
		if (sampleBerWithP(accept-prob(p))) then --- se true, troca faz a trocar de Actors no buffer, cc faz nada
	  	   <name: Ser | req-cnt: (p + 1.0) , conn-set: add( [SZC | Buf], < Actor gt gt conLen 0 > ) , req-set: [SZ | swap(ListReq, < Actor gt gt 0 0 >, sampleUniWithInt(SZ))], cnt: s(i) , suc-get: s(k) ,AS > 
		mytick( insert( { gt | SL }, [ gt + Tc , (server <- TIMEOUT(Actor) ), 0] ) )
	        else
	           <name: Ser | req-cnt: (p + 1.0) , conn-set: [SZC | Buf] , req-set: [SZ | ListReq], cnt: s(i) , suc-get: k , AS >
	           mytick({gt | SL }) 
                fi
	     else
		<name: Ser | req-cnt: p , conn-set: add( [SZC | Buf], < Actor gt gt conLen 0 > ) , req-set: add( [SZ | ListReq], < Actor gt gt 0 0 > ), cnt: s(i) , suc-get: s(k) , AS >
	      mytick( insert( { gt | SL }, [ gt + Tc , (server <- TIMEOUT(Actor) ), 0] ) )
	     fi
	   else --- cliente ja esta no buffer
		--- emptyServer
		 <name: Ser | req-cnt: (p) , conn-set: [SZC | Buf] , req-set: [SZ | ListReq], cnt: s(i) , suc-get: k , AS >
	           mytick({gt | SL }) 
	    fi 
	fi .
	
   rl [ServerBytes] : 
     	flag(true, r) { gt | SL }
     	<name: Ser | req-cnt: p , conn-set: [SZC | Buf] , req-set: [SZ | ListReq], cnt: i , suc-get: k , AS > 
    	 (Ser <- DATA(Actor , len( sbytes ))) 
     => flag(gt <= LIMIT * r, r)
   	if ((Actor in Buf)) then
	   if ( (Actor in ListReq) and (getBytesPOST(Actor,Buf) < getLenPOST(Actor,Buf)) ) then --- Esta na Batalha e ainda n foi respondido
   <name: Ser | req-cnt: (p + 1.0) , conn-set: update( [SZC | Buf], < Actor (getTime(Actor, Buf)) getLastTime(Actor, Buf) getLenPOST(Actor, Buf) getBytesPOST(Actor,Buf) >, < Actor getTime(Actor, Buf) gt getLenPOST(Actor, Buf) (getBytesPOST(Actor,Buf) + sbytes) > ) , req-set: [SZ | ListReq], cnt: s(i) , suc-get: k ,AS > 
		 mytick( insert( { gt | SL }, [ gt + Tc , (server <- TIMEOUT(Actor) ), 0] ) )
	   else
	    if  ( not(Actor in ListReq) and (getBytesPOST(Actor,Buf) < getLenPOST(Actor,Buf)) ) then --- n esta na batalha e n foi respondido
	      if (float(SZ) >= floor(S * Ts)) then --- se buffer da batalha esta cheio
	  	if (sampleBerWithP(accept-prob(p))) then --- se true, troca faz a trocar de Actors no buffer, cc faz nada
	  	   <name: Ser | req-cnt: (p + 1.0) , conn-set: update( [SZC | Buf], < Actor (getTime(Actor, Buf)) getLastTime(Actor, Buf) getLenPOST(Actor, Buf) getBytesPOST(Actor,Buf) >, < Actor getTime(Actor, Buf) gt getLenPOST(Actor, Buf) (getBytesPOST(Actor,Buf) + sbytes) > ) , req-set: [SZ | swap(ListReq, < Actor gt gt 0 0 >, sampleUniWithInt(SZ))], cnt: s(i) , suc-get: k ,AS > 
		 mytick( insert( { gt | SL }, [ gt + Tc , (server <- TIMEOUT(Actor) ), 0] ) )
	        else
	           <name: Ser | req-cnt: (p + 1.0) , conn-set: [SZC | Buf] , req-set: [SZ | ListReq], cnt: s(i) , suc-get: k , AS >
	           mytick({gt | SL }) 
                 fi
	     else
		 <name: Ser | req-cnt: p , conn-set: update( [SZC | Buf], < Actor (getTime(Actor, Buf)) getLastTime(Actor, Buf) getLenPOST(Actor, Buf) getBytesPOST(Actor,Buf) >, < Actor getTime(Actor, Buf) gt getLenPOST(Actor, Buf) (getBytesPOST(Actor,Buf) + sbytes) > ) , req-set: add( [SZ | ListReq], < Actor gt gt 0 0 > ), cnt: s(i) , suc-get: k , AS >
		mytick( insert( { gt | SL }, [ gt + Tc , (server <- TIMEOUT(Actor) ), 0] ) )
	      fi
            else
	           <name: Ser | req-cnt: (p + 1.0) , conn-set: [SZC | Buf] , req-set: [SZ | ListReq], cnt: s(i) , suc-get: k , AS >
	           mytick({gt | SL })
	    fi
	  fi	 
        else 
	---emptyServer
	  <name: Ser | req-cnt: (p + 1.0) , conn-set: [SZC | Buf] , req-set: [SZ | ListReq], cnt: s(i) , suc-get: k , AS >
	    mytick({gt | SL }) 
	fi .

    rl[ServerTimeoutReq]: 
       flag(true, r) 
       <name: Ser | req-cnt: p , conn-set: [SZC | Buf] , req-set: [SZ | ListReq], cnt: i , suc-get: k , AS > 
      (Ser <- TIMEOUT) { gt | SL }
     => flag(gt <= LIMIT * r, r)
	<name: Ser | req-cnt: (floor(S * Ts) + 1.0) , conn-set: [SZC | Buf] , req-set: [SZC | Buf ], cnt: i , suc-get: k , AS >  
	mytick( insert( insertList( { gt | SL } , reply(Ser, Buf, gt) ) , [ gt + Ts , (server <- TIMEOUT), 0] )) . 
	
    rl[ServerTimeoutConn]: 
       flag(true, r) 
      <name: Ser | req-cnt: p , conn-set: [SZC | Buf] , req-set: [SZ | ListReq], cnt: i , suc-get: k , AS > 
      (Ser <- TIMEOUT (Actor)) { gt | SL }
     => flag(gt <= LIMIT * r, r) 
       if ( (Actor in Buf) and (gt > (getLastTime(Actor , Buf ) ) + Tc)) then
	     if (Actor in ListReq) then
	    <name: Ser | req-cnt: p , conn-set: [SZC + (-1) | remove(Buf, Actor) ] , req-set: [SZ + (-1) | remove(ListReq, Actor) ], cnt: i , suc-get: k , AS >
	     mytick(insert( { gt | SL } , [ gt + delay , (Actor <- poll), 0 ] ) )  
	    else
	     <name: Ser | req-cnt: p , conn-set: [SZC + (-1) | remove(Buf, Actor) ] , req-set: [SZ | ListReq], cnt: i , suc-get: k , AS > 
	     mytick(insert( { gt | SL } , [ gt + delay , (Actor <- poll), 0 ] ) ) 
	    fi
	else
	   <name: Ser | req-cnt: p , conn-set: [SZC | Buf] , req-set: [SZ | ListReq], cnt: i , suc-get: k , AS > 
	    mytick({ gt | SL })
         fi . 	
 
  rl[ServerRemove]:
	<name: Ser | req-cnt: p , conn-set: [SZC | Buf] , req-set: [SZ | ListReq], cnt: i , suc-get: k , AS >
	(Actor <- REMOVE) { gt | SL }
    =>
	<name: Ser | req-cnt: p , conn-set: [SZC + (-1) | remove(Buf, Actor) ] , req-set: [SZ + (-1) | remove(ListReq, Actor) ], cnt: i , suc-get: k , AS >
	mytick({ gt | SL }) .

--- TODO PRAGMA e ENVIO DE PACOTES PRAGMA PELO ATACANTE

--- END OF SERVER ---

--- CLIENT ---

--- Equação para gerar clientes

--- Clients coming in at the rate of Rho * S
    eq crate(Rho)
     <name: g | server: Ser, cnt: i , AS > (g <- spawn) { gt | SL }
     = crate(Rho)
        <name: g | server: Ser , cnt: s(i) , AS > 
        <name: c(i) | server: Ser , retries: 0 , atime: gt , stime: Infinity , status: waiting , AS > 
        mytick(insert(insert( { gt | SL } ,
           [ gt  , (c(i) <- poll), 0 ] ) ,
	   [ (1.0  / (Rho * SA)) + (gt)  , (g <- spawn), 0 ] ) ) . 
--- Fim da Equacao

   rl [CliSendPOST] : 
        flag(true, r) crate(Rho) arate(Alpha)
        <name: c(i) | server: Ser , retries: j , status: waiting, AS >
        (c(i) <- poll) { gt | SL }
     => flag(gt <= LIMIT * r, r) crate(Rho) arate(Alpha)
        if (j <= J(Rho,Alpha)) then
          <name: c(i) | server: Ser , retries: j , status: waiting, AS >
         mytick(insert( insert ( insert ( { gt | SL }, [ gt + delay, (Ser <- POST( c(i), len(contentLenCLI) )), 0 ] ), [ gt + Tc + gt , (c(i) <- poll), 0 ] ), [gt + delay + delay, c(i) <- SendData, 0] ) )  
	---mytick(insert ( { gt | SL}, [ gt + delay, (Ser <- GET( c(i), len(contentLen) )), 0 ]  )  ) 
        else
          <name: c(i) | server: Ser , retries: j , status: waiting, AS >
          mytick({ gt | SL })
        fi .
  
    rl [CliSendDATA] : --- TODO : mytick({ gt | SL })
        flag(true, r) { gt | SL }
	<name: c(i) | server: Ser , retries: j , status: waiting, AS > 
        (c(i) <- SendData )
     => flag(gt <= LIMIT * r, r)
	<name: c(i) | server: Ser , retries: j , status: waiting, AS > 
	---mytick({ gt | SL }) .
	mytick(insert( { gt | SL } , [ gt + delay , (Ser <- DATA(c(i),len(dataCLI))), 0 ] ) ) . 

    rl [CliRecACK] : --- TODO : mytick({ gt | SL })
        flag(true, r) { gt | SL }
	<name: c(i) | server: Ser , stime: Infinity , retries: j , status: waiting, AS > 
        (c(i) <- ACK )
     => flag(gt <= LIMIT * r, r)
	<name: c(i) | server: Ser , stime: gt , retries: j , status: connected, AS > 
	mytick({ gt | SL }) .
	---mytick(insert( { gt | SL } , [ gt + delay, (Ser <- GET(c(i), len(contentLen)) ), 0 ] ) )  .	
	
  rl [CliConn] : 
        flag(true, r) { gt | SL }
        <name: c(i) | server: Ser , retries: j , status: connected, AS >
       (c(i) <- ACK)
     => flag(gt <= LIMIT * r, r) 
        <name: c(i) | server: Ser , retries: j , status: connected, AS >
	mytick({ gt | SL }) .        
	---mytick(insert( { gt | SL } , [ gt + delay , Ser <- GET(c(i),len(contentLen)), 0 ] ) )  .

  rl [CliConnData] : 
        flag(true, r) { gt | SL }
        <name: c(i) | server: Ser , retries: j , status: connected, AS >
       (c(i) <- SendData)
     => flag(gt <= LIMIT * r, r) 
        <name: c(i) | server: Ser , retries: j , status: connected, AS >
	mytick({ gt | SL }) .

   rl[CliNotRestartAfterRemove] :
      flag(true,r) { gt | SL }
      (c(i) <- poll)
      <name: c(i) | server: Ser , retries: j , status: connected, AS >
     => flag(gt <= LIMIT * r, r)
      <name: c(i) | server: Ser , retries: j , status: connected, AS > 
      mytick({ gt | SL }) . 	

--- END OF CLIENT ---

--- Attackers coming in at the rate of Rho * S
    eq arate(Alpha)
       <name: ga | server: Ser, cnt: i , AS > (ga <- spawn) { gt | SL }
     = arate(Alpha)
        <name: ga | server: Ser , cnt: s(i) , AS > 
        <name: a(i) | server: Ser , status: none , AS >  
        mytick(insert(insert( { gt | SL } ,
           [ gt  , (a(i) <- poll), 0 ] ) ,
	   [ (1.0  / (Alpha * SA)) + (gt)  , (ga <- spawn), 0 ] ) ) . 

--- ATTACKER ---

rl [ATSendPOST] : 
        flag(true, r) crate(Rho) arate(Alpha)
        <name: a(i) | server: Ser, status: none , AS >
        (a(i) <- poll) { gt | SL }
     => flag(gt <= LIMIT * r, r) crate(Rho) arate(Alpha)
          <name: a(i) | server: Ser, status: post ,AS >
         mytick(insert( insert ( insert ( { gt | SL }, [ gt + delay, (Ser <- POST( a(i), len(contentLenATA) )), 0 ] ), [ gt + Tc + gt , (a(i) <- poll), 0 ] ), [gt + delay + delay, a(i) <- SendData, 0] ) )  .
	
    rl [ATSendDATA] : --- TODO : mytick({ gt | SL })
        flag(true, r) { gt | SL }
	<name: a(i) | server: Ser, status: post , AS > 
        (a(i) <- SendData )
     => flag(gt <= LIMIT * r, r)
	<name: a(i) | server: Ser , status: data, AS > 
	---mytick({ gt | SL }) .
	mytick(insert( { gt | SL } , [ gt + delay , (Ser <- DATA(a(i),len(dataAT))), 0 ] ) ) . 

    rl [ATRecACK] : --- TODO : mytick({ gt | SL })
        flag(true, r) { gt | SL }
	<name: a(i) | server: Ser , status: data, AS > 
        (a(i) <- ACK )
     => flag(gt <= LIMIT * r, r)
	<name: a(i) | server: Ser, status: data, AS > 
	mytick({ gt | SL }) .

    rl [ATConnDATA] : 
        flag(true, r) { gt | SL }
        <name: a(i) | server: Ser , status: data, AS >
       (a(i) <- SendData)
     => flag(gt <= LIMIT * r, r) 
        <name: a(i) | server: Ser , status: data, AS >
	mytick({ gt | SL }) .        
	
   rl[ATNotRestartAfterRemove] :
      flag(true,r) { gt | SL }
      (a(i) <- poll)
      <name: a(i) | server: Ser, status: data, AS >
     => flag(gt <= LIMIT * r, r)
      <name: a(i) | server: Ser, status: data, AS > 
      mytick({ gt | SL }) . 	


--- *** PVeSTa *** ---

var P : Float .
var C : Config .
var b : Bool .

op countConnected : Float Config -> Float .
op  countClients : Config -> Float .
op countAttackers : Config -> Float .
op countDenialPragma : Config -> Float .
op countConAttacker : Float Config -> Float .
op val : Nat Config -> Float .
op sat : Nat Config -> Bool .
op networkTraffic : Config -> Float .
op countPragma : Config -> Float .

--- Success Probability
op hasConnected : Nat Config -> Float .

eq hasConnected(i, <name: c(i) | status: connected , AS > C ) = 1.0 .
eq hasConnected(i, C) = 0.0 [owise] .

eq countConnected(p, <name: c(i) | status: connected , AS > C ) = countConnected(p + 1.0 , C) .
eq countConnected(p,C) = p [owise] .

eq countConAttacker(p, <name: a(i) | status: data , AS > C ) = countConAttacker(p + 1.0 , C) .
eq countConAttacker(p,C) = p [owise] .

eq countClients(<name: g | cnt: i , AS > C) = float(i) .
eq countAttackers(<name: ga | cnt: i , AS > C) = float(i) .
eq networkTraffic(<name: Ser | cnt: i , suc-get: k , AS > C) = float(i) .
eq countPragma(<name: a(i) | server: Ser , cnt-pragma: k, AS > C) = float(k) .

  --- Average time-to-service
  op  avgTTS : Config -> Float .
  op  sumTTS : Float Config -> Float .
 ceq avgTTS(C) = if r > 0.0 then sumTTS(0.0, C) / r else 0.0 fi 
                    if r := countConnected(0.0, C) .

  eq sumTTS(p, <name: c(i) | atime: t , stime: t' , status: connected , AS > C )
     = sumTTS(p + (t' + (- t)), C) .
  eq sumTTS(p, C) = p [owise] .  

eq tick( flag(b, r) C ) = flag(true, r + 1.0) C .

eq sat(0, C) = if hasConnected(0, C) > 0.0 then true else false fi .
eq val(0,C) = countConnected(0.0,C) .
eq val(1,C) = countClients(C) .
eq val(2,C) = countConnected(0.0, C) / countClients(C) . 
---eq val(3,C) = countConAttacker(0.0,C) .
eq val(3,C) = countAttackers(C) .
eq val(4,C) = networkTraffic(C) .
---eq val(6,C) = countPragma(C) .
eq val(5,C) = avgTTS(C) .

endm	


